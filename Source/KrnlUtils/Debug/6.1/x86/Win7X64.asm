; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	B:\Programm\WntSys\TestFilter\Release\1_1\Source\KrnlUtils\Win7X64.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_pwszDevicePowerStateV DD FLAT:$SG70457
	DD	FLAT:$SG70458
	DD	FLAT:$SG70459
	DD	FLAT:$SG70460
	DD	FLAT:$SG70461
	DD	FLAT:$SG70462
_pwszDeviceRelationTypeV DD FLAT:$SG70464
	DD	FLAT:$SG70465
	DD	FLAT:$SG70466
	DD	FLAT:$SG70467
	DD	FLAT:$SG70468
	DD	FLAT:$SG70469
_pwszFsInfoClassV DD FLAT:$SG70471
	DD	FLAT:$SG70472
	DD	FLAT:$SG70473
	DD	FLAT:$SG70474
	DD	FLAT:$SG70475
	DD	FLAT:$SG70476
	DD	FLAT:$SG70477
	DD	FLAT:$SG70478
	DD	FLAT:$SG70479
	DD	FLAT:$SG70480
_pwszPowerActionV DD FLAT:$SG70482
	DD	FLAT:$SG70483
	DD	FLAT:$SG70484
	DD	FLAT:$SG70485
	DD	FLAT:$SG70486
	DD	FLAT:$SG70487
	DD	FLAT:$SG70488
	DD	FLAT:$SG70489
_pwszPowerStateTypeV DD FLAT:$SG70491
	DD	FLAT:$SG70492
_pwszSystemPowerStateV DD FLAT:$SG70494
	DD	FLAT:$SG70495
	DD	FLAT:$SG70496
	DD	FLAT:$SG70497
	DD	FLAT:$SG70498
	DD	FLAT:$SG70499
	DD	FLAT:$SG70500
	DD	FLAT:$SG70501
_DATA	ENDS
CONST	SEGMENT
$SG68340 DB	00H
	ORG $+3
$SG68354 DB	00H, 00H
	ORG $+2
$SG70457 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'U', 00H, 'n'
	DB	00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'f', 00H
	DB	'i', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70458 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'D', 00H, '0'
	DB	00H, 00H, 00H
$SG70459 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'D', 00H, '1'
	DB	00H, 00H, 00H
$SG70460 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'D', 00H, '2'
	DB	00H, 00H, 00H
$SG70461 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'D', 00H, '3'
	DB	00H, 00H, 00H
$SG70462 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'M', 00H, 'a'
	DB	00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H, 'm', 00H, 00H, 00H
	ORG $+2
$SG70464 DB	'B', 00H, 'u', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'l', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG70465 DB	'E', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H
$SG70466 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'R', 00H
	DB	'e', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70467 DB	'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70468 DB	'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'R'
	DB	00H, 'e', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 00H, 00H
	ORG $+2
$SG70469 DB	'S', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H
	DB	'B', 00H, 'u', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70471 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'V', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG70472 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'L', 00H, 'a', 00H, 'b', 00H, 'e', 00H, 'l', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'F', 00H, 's', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG70473 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG70474 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'A', 00H, 't', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'b', 00H, 'u'
	DB	00H, 't', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 00H, 00H
	ORG $+2
$SG70475 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l'
	DB	00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG70476 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'F', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'S', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
$SG70477 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I'
	DB	00H, 'd', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
$SG70478 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'h', 00H, 'I', 00H, 'n', 00H, 'f', 00H
	DB	'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H
$SG70479 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'V', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'F'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG70480 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 's', 00H
	DB	'M', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H, 'm'
	DB	00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG70482 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'N', 00H, 'o'
	DB	00H, 'n', 00H, 'e', 00H, 00H, 00H
$SG70483 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'R', 00H, 'e'
	DB	00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
$SG70484 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S', 00H, 'l'
	DB	00H, 'e', 00H, 'e', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG70485 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'H', 00H, 'i'
	DB	00H, 'b', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG70486 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S', 00H, 'h'
	DB	00H, 'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	00H, 00H
$SG70487 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S', 00H, 'h'
	DB	00H, 'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG70488 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S', 00H, 'h'
	DB	00H, 'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'O', 00H, 'f', 00H, 'f', 00H, 00H, 00H
	ORG $+2
$SG70489 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'A', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'a'
	DB	00H, 'r', 00H, 'm', 00H, 'E', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 00H, 00H
	ORG $+2
$SG70491 DB	'S', 00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG70492 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG70494 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'U', 00H, 'n'
	DB	00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'f', 00H
	DB	'i', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70495 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'W', 00H, 'o'
	DB	00H, 'r', 00H, 'k', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG70496 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'S', 00H, 'l'
	DB	00H, 'e', 00H, 'e', 00H, 'p', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'1', 00H, 00H, 00H
	ORG $+2
$SG70497 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'S', 00H, 'l'
	DB	00H, 'e', 00H, 'e', 00H, 'p', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'2', 00H, 00H, 00H
	ORG $+2
$SG70498 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'S', 00H, 'l'
	DB	00H, 'e', 00H, 'e', 00H, 'p', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'3', 00H, 00H, 00H
	ORG $+2
$SG70499 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'H', 00H, 'i'
	DB	00H, 'b', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG70500 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'S', 00H, 'h'
	DB	00H, 'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	00H, 00H
$SG70501 DB	'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'M', 00H, 'a'
	DB	00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H, 'm', 00H, 00H, 00H
	ORG $+6
$SG70631 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'C', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'S', 00H
	DB	'e', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70633 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'C', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'O', 00H
	DB	'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70635 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'C', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'A', 00H, 't', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'b', 00H, 'u', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70637 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'C', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'S', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'A', 00H, 'c', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70639 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'C', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'E', 00H
	DB	'a', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h'
	DB	00H, 09H, 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	'%', 00H, '#', 00H, 'x', 00H, 00H, 00H
	ORG $+6
$SG70650 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'o', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l'
	DB	00H, '.', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70652 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'o', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l'
	DB	00H, '.', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70654 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'o', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l'
	DB	00H, '.', 00H, 'I', 00H, 'o', 00H, 'C', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'C', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70656 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'o', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l'
	DB	00H, '.', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '3', 00H
	DB	'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70668 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'Q', 00H, 'u'
	DB	00H, 'e', 00H, 'r', 00H, 'y', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, '.', 00H
	DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70679 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'Q', 00H, 'u'
	DB	00H, 'e', 00H, 'r', 00H, 'y', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, '.', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't'
	DB	00H, 'h', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70681 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'Q', 00H, 'u'
	DB	00H, 'e', 00H, 'r', 00H, 'y', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, '.', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70693 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'S', 00H, 'y', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'C', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70695 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'T', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70697 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'S', 00H, 'y', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70699 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'D', 00H, 'e', 00H, 'v'
	DB	00H, 'i', 00H, 'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70701 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'S', 00H, 'h', 00H
	DB	'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70713 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'Q', 00H, 'u'
	DB	00H, 'e', 00H, 'r', 00H, 'y', 00H, 'V', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, '.', 00H, 'F', 00H, 's', 00H, 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70724 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'R', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '.', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70726 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'R', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '.', 00H, 'K', 00H, 'e', 00H, 'y', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70728 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'R', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '.', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'I', 00H, '6'
	DB	00H, '4', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG70739 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70741 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70743 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70745 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'R', 00H, 'e', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'c', 00H, 'e'
	DB	00H, 'I', 00H, 'f', 00H, 'E', 00H, 'x', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70747 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'A', 00H, 'd', 00H, 'v', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e'
	DB	00H, 'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70749 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'C', 00H, 'l', 00H, 'u', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70751 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'H'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70763 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'W', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 'W', 00H, 'a', 00H, 'k', 00H, 'e', 00H
	DB	'.', 00H, 'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70774 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'W', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'L', 00H, 'e', 00H
	DB	'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70776 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'W', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'K', 00H, 'e', 00H
	DB	'y', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70778 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, '.', 00H, 'W', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'B', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'I', 00H, '6'
	DB	00H, '4', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG70827 DB	'M', 00H, 'a', 00H, 'j', 00H, 'o', 00H, 'r', 00H, 'F', 00H
	DB	'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70831 DB	'M', 00H, 'i', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'F', 00H
	DB	'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG70834 DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70840 DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70848 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70854 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'O', 00H, 'b', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70880 DB	'M', 00H, 'd', 00H, 'l', 00H, 'A', 00H, 'd', 00H, 'd', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70888 DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70894 DB	'A', 00H, 's', 00H, 's', 00H, 'o', 00H, 'c', 00H, 'i', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'I', 00H, 'r', 00H, 'p'
	DB	00H, '.', 00H, 'M', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'I', 00H, 'r', 00H, 'p', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70900 DB	'A', 00H, 's', 00H, 's', 00H, 'o', 00H, 'c', 00H, 'i', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'I', 00H, 'r', 00H, 'p'
	DB	00H, '.', 00H, 'S', 00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H
	DB	'm', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70906 DB	'I', 00H, 'o', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'u', 00H, 's', 00H, '.', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70912 DB	'I', 00H, 'o', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'u', 00H, 's', 00H, '.', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'x', 00H, 00H
	DB	00H
$SG70918 DB	'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 's', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70924 DB	'P', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'n'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70930 DB	'C', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70936 DB	'C', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'l', 00H
	DB	'I', 00H, 'r', 00H, 'q', 00H, 'l', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG70942 DB	'C', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'l', 00H
	DB	'R', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70948 DB	'U', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'B', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
$SG70954 DB	'T', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'O', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a', 00H, 'y', 00H, '.'
	DB	00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, '#', 00H, 'p', 00H, 00H
	DB	00H
CONST	ENDS
PUBLIC	?FormatIoStackWin7X64@@YAHPADPAPA_W@Z		; FormatIoStackWin7X64
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\win7x64.cpp
_TEXT	SEGMENT
_pStackData$ = 8					; size = 4
_ppFStack$ = 12						; size = 4
?FormatIoStackWin7X64@@YAHPADPAPA_W@Z PROC		; FormatIoStackWin7X64

; 26   : {

	push	ebp
	mov	ebp, esp

; 27   : 	return FormatIoStackGeneric(
; 28   : 		pStackData,
; 29   : 		ppFStack);

	mov	eax, DWORD PTR _ppFStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStackData$[ebp]
	push	ecx
	call	?FormatIoStackGeneric@@YAHPADPAPA_W@Z	; FormatIoStackGeneric
	add	esp, 8

; 30   : }

	pop	ebp
	ret	0
?FormatIoStackWin7X64@@YAHPADPAPA_W@Z ENDP		; FormatIoStackWin7X64
_TEXT	ENDS
PUBLIC	?StringCbLengthW@@YGJPB_WIPAI@Z			; StringCbLengthW
PUBLIC	?StringCbPrintfW@@YAJPA_WIPB_WZZ		; StringCbPrintfW
PUBLIC	__$ArrayPad$
EXTRN	__imp__HeapFree@12:PROC
EXTRN	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z:PROC	; CopyToBuffer
EXTRN	_MinorFunctionDes:PROC
EXTRN	?AppendString@@YAHPA_WPAPADPAK2PAX@Z:PROC	; AppendString
EXTRN	_MajorFunctionDes:PROC
EXTRN	?AllocFromHeap@@YAPAXPAXK@Z:PROC		; AllocFromHeap
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\platfdepcompile.cpp
_TEXT	SEGMENT
_cbItemLen$ = -508					; size = 4
_wszItemBuf$ = -504					; size = 202
_wszDecodeBuf$ = -296					; size = 202
_cbOffset$ = -84					; size = 4
_bRet$ = -80						; size = 4
_pFIoStack$ = -76					; size = 4
_BufSize$ = -72						; size = 4
_hHeap$ = -68						; size = 4
_IoStack$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
_pIoStackData$ = 8					; size = 4
_ppFStack$ = 12						; size = 4
?FormatIoStackGeneric@@YAHPADPAPA_W@Z PROC		; FormatIoStackGeneric

; 911  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -8					; fffffff8H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 912  : 	IO_STACK_LOCATION	IoStack;
; 913  : 
; 914  : 	memcpy(&IoStack, pIoStackData, sizeof IoStack);

	push	56					; 00000038H
	mov	eax, DWORD PTR _pIoStackData$[ebx]
	push	eax
	lea	ecx, DWORD PTR _IoStack$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 915  : 
; 916  : 	HANDLE hHeap = GetProcessHeap();

	call	DWORD PTR __imp__GetProcessHeap@0
	mov	DWORD PTR _hHeap$[ebp], eax

; 917  : 
; 918  : 	if (hHeap == NULL) return FALSE;

	cmp	DWORD PTR _hHeap$[ebp], 0
	jne	SHORT $LN19@FormatIoSt
	xor	eax, eax
	jmp	$LN20@FormatIoSt
$LN19@FormatIoSt:

; 919  : 
; 920  : 	SIZE_T BufSize = FMTIRP_INITIAL_BUF_SIZE;

	mov	DWORD PTR _BufSize$[ebp], 1024		; 00000400H

; 921  : 	PCHAR pFIoStack = (PCHAR) AllocFromHeap(hHeap, BufSize);

	mov	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	call	?AllocFromHeap@@YAPAXPAXK@Z		; AllocFromHeap
	add	esp, 8
	mov	DWORD PTR _pFIoStack$[ebp], eax

; 922  : 
; 923  : 	if (pFIoStack == NULL) return FALSE;

	cmp	DWORD PTR _pFIoStack$[ebp], 0
	jne	SHORT $LN18@FormatIoSt
	xor	eax, eax
	jmp	$LN20@FormatIoSt
$LN18@FormatIoSt:

; 924  : 	
; 925  : 	BOOL bRet = FALSE;

	mov	DWORD PTR _bRet$[ebp], 0

; 926  : 	SIZE_T cbOffset = 0;

	mov	DWORD PTR _cbOffset$[ebp], 0

; 927  : 	WCHAR wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 928  : 	WCHAR wszDecodeBuf[FMTIRP_ITEM_BUF_SIZE];
; 929  : 	SIZE_T cbItemLen;
; 930  : 
; 931  : 	FORMAT_ITEM(
; 932  : 		wszItemBuf,
; 933  : 		L"MajorFunction =                                 %s",
; 934  : 		MajorFunctionDes(
; 935  : 			IoStack.MajorFunction,
; 936  : 			wszDecodeBuf,
; 937  : 			sizeof wszDecodeBuf),
; 938  : 		&pFIoStack,
; 939  : 		&cbOffset,
; 940  : 		&BufSize,
; 941  : 		hHeap,
; 942  : 		bRet)

	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszDecodeBuf$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _IoStack$[ebp]
	push	edx
	call	_MajorFunctionDes
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET $SG70827
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIoStack$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 943  : 	if (!bRet)

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN17@FormatIoSt
	jmp	$CLEANUP$70829

; 944  : 		goto CLEANUP;

	jmp	$CLEANUP$70829
$LN17@FormatIoSt:

; 945  : 
; 946  : 	FORMAT_ITEM(
; 947  : 		wszItemBuf,
; 948  : 		L"MinorFunction =                                 %s",
; 949  : 		MinorFunctionDes(
; 950  : 			IoStack.MajorFunction,
; 951  : 			IoStack.MinorFunction,
; 952  : 			wszDecodeBuf,
; 953  : 			sizeof wszDecodeBuf),
; 954  : 		&pFIoStack,
; 955  : 		&cbOffset,
; 956  : 		&BufSize,
; 957  : 		hHeap,
; 958  : 		bRet)

	push	202					; 000000caH
	lea	eax, DWORD PTR _wszDecodeBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _IoStack$[ebp+1]
	push	ecx
	movzx	edx, BYTE PTR _IoStack$[ebp]
	push	edx
	call	_MinorFunctionDes
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET $SG70831
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIoStack$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 959  : 	if (!bRet)

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN15@FormatIoSt
	jmp	$CLEANUP$70829

; 960  : 		goto CLEANUP;

	jmp	$CLEANUP$70829
$LN15@FormatIoSt:

; 961  : 
; 962  : 
; 963  : 	StringCbPrintfW(
; 964  : 		wszItemBuf,
; 965  : 		sizeof wszItemBuf,
; 966  : 		L"Flags =                                         %#x",
; 967  : 		IoStack.Flags);

	movzx	eax, BYTE PTR _IoStack$[ebp+2]
	push	eax
	push	OFFSET $SG70834
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 968  : 
; 969  : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 970  : 	cbItemLen += sizeof (WCHAR);

	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cbItemLen$[ebp], ecx

; 971  : 	if (!CopyToBuffer(&pFIoStack, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 972  : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIoStack$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN13@FormatIoSt
	jmp	$CLEANUP$70829

; 973  : 		goto CLEANUP;

	jmp	$CLEANUP$70829
$LN13@FormatIoSt:

; 974  : 
; 975  : 	StringCbPrintfW(
; 976  : 		wszItemBuf,
; 977  : 		sizeof wszItemBuf,
; 978  : 		L"Control =                                       %#x",
; 979  : 		IoStack.Control);

	movzx	edx, BYTE PTR _IoStack$[ebp+3]
	push	edx
	push	OFFSET $SG70840
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 980  : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 981  : 	cbItemLen += sizeof (WCHAR);

	mov	eax, DWORD PTR _cbItemLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _cbItemLen$[ebp], eax

; 982  : 	if (!CopyToBuffer(&pFIoStack, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 983  : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIoStack$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN11@FormatIoSt
	jmp	$CLEANUP$70829

; 984  : 		goto CLEANUP;

	jmp	$CLEANUP$70829
$LN11@FormatIoSt:

; 985  : 
; 986  : 	if (!FormatIosParameters(&pFIoStack, &cbOffset, &IoStack, &BufSize, 
; 987  : 		hHeap))

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	lea	eax, DWORD PTR _IoStack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pFIoStack$[ebp]
	push	edx
	call	?FormatIosParameters@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FormatIosParameters
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN9@FormatIoSt
	jmp	$CLEANUP$70829

; 988  : 		goto CLEANUP;

	jmp	$CLEANUP$70829
$LN9@FormatIoSt:

; 989  : 
; 990  : 	StringCbPrintfW(
; 991  : 		wszItemBuf,
; 992  : 		sizeof wszItemBuf,
; 993  : 		L"DeviceObject =                                  %#p",
; 994  : 		IoStack.DeviceObject);

	mov	eax, DWORD PTR _IoStack$[ebp+40]
	push	eax
	push	OFFSET $SG70848
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 995  : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 996  : 	cbItemLen += sizeof (WCHAR);

	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cbItemLen$[ebp], ecx

; 997  : 	if (!CopyToBuffer(&pFIoStack, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 998  : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIoStack$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN7@FormatIoSt
	jmp	$CLEANUP$70829

; 999  : 		goto CLEANUP;

	jmp	$CLEANUP$70829
$LN7@FormatIoSt:

; 1000 : 
; 1001 : 	StringCbPrintfW(
; 1002 : 		wszItemBuf,
; 1003 : 		sizeof wszItemBuf,
; 1004 : 		L"FileObject =                                    %#p",
; 1005 : 		IoStack.DeviceObject);

	mov	edx, DWORD PTR _IoStack$[ebp+40]
	push	edx
	push	OFFSET $SG70854
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1006 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1007 : 	cbItemLen += sizeof (WCHAR);

	mov	eax, DWORD PTR _cbItemLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _cbItemLen$[ebp], eax

; 1008 : 	if (!CopyToBuffer(&pFIoStack, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1009 : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIoStack$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN5@FormatIoSt
	jmp	SHORT $CLEANUP$70829

; 1010 : 		goto CLEANUP;

	jmp	SHORT $CLEANUP$70829
$LN5@FormatIoSt:

; 1011 : 
; 1012 : 
; 1013 : 	// Add the extra null terminator which marks the text end
; 1014 : 	//
; 1015 : 	wszItemBuf[0] = L'\0';

	xor	ecx, ecx
	mov	WORD PTR _wszItemBuf$[ebp], cx

; 1016 : 	cbItemLen = sizeof (WCHAR);

	mov	DWORD PTR _cbItemLen$[ebp], 2

; 1017 : 	if (!CopyToBuffer(&pFIoStack, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1018 : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIoStack$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN3@FormatIoSt
	jmp	SHORT $CLEANUP$70829

; 1019 : 		goto CLEANUP;

	jmp	SHORT $CLEANUP$70829
$LN3@FormatIoSt:

; 1020 : 
; 1021 : 	// If we made it here, success.
; 1022 : 	//
; 1023 : 	*ppFStack = (PWCHAR) pFIoStack;

	mov	edx, DWORD PTR _ppFStack$[ebx]
	mov	eax, DWORD PTR _pFIoStack$[ebp]
	mov	DWORD PTR [edx], eax

; 1024 : 	bRet = TRUE;

	mov	DWORD PTR _bRet$[ebp], 1
$CLEANUP$70829:

; 1025 : 
; 1026 : CLEANUP:
; 1027 : 	if (!bRet) {

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FormatIoSt

; 1028 : 		HeapFree(hHeap, 0, pFIoStack);

	mov	ecx, DWORD PTR _pFIoStack$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	call	DWORD PTR __imp__HeapFree@12
$LN1@FormatIoSt:

; 1029 : 	}
; 1030 : 	return bRet;

	mov	eax, DWORD PTR _bRet$[ebp]
$LN20@FormatIoSt:

; 1031 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?FormatIoStackGeneric@@YAHPADPAPA_W@Z ENDP		; FormatIoStackGeneric
; Function compile flags: /Odtp
; File c:\apps\pw7hp\devpgm\mssdk\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringCbPrintfW@@YAJPA_WIPB_WZZ
_TEXT	SEGMENT
_argList$67654 = -12					; size = 4
_cchDest$ = -8						; size = 4
_hr$ = -4						; size = 4
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCbPrintfW@@YAJPA_WIPB_WZZ PROC			; StringCbPrintfW, COMDAT

; 4797 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4798 :     HRESULT hr;
; 4799 :     size_t cchDest = cbDest / sizeof(wchar_t);

	mov	eax, DWORD PTR _cbDest$[ebp]
	shr	eax, 1
	mov	DWORD PTR _cchDest$[ebp], eax

; 4800 : 
; 4801 :     hr = StringValidateDestW(pszDest, cchDest, STRSAFE_MAX_CCH);

	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringValidateDestW@@YGJPB_WII@Z	; StringValidateDestW
	mov	DWORD PTR _hr$[ebp], eax

; 4802 :     
; 4803 :     if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringCbPr

; 4804 :     {
; 4805 :         va_list argList;
; 4806 : 
; 4807 :         va_start(argList, pszFormat);

	lea	eax, DWORD PTR _pszFormat$[ebp+4]
	mov	DWORD PTR _argList$67654[ebp], eax

; 4808 : 
; 4809 :         hr = StringVPrintfWorkerW(pszDest,
; 4810 :                                   cchDest,
; 4811 :                                   NULL,
; 4812 :                                   pszFormat,
; 4813 :                                   argList);

	mov	ecx, DWORD PTR _argList$67654[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFormat$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	push	ecx
	call	?StringVPrintfWorkerW@@YGJPA_WIPAIPB_WPAD@Z ; StringVPrintfWorkerW
	mov	DWORD PTR _hr$[ebp], eax

; 4814 : 
; 4815 :         va_end(argList);

	mov	DWORD PTR _argList$67654[ebp], 0
$LN1@StringCbPr:

; 4816 :     }
; 4817 : 
; 4818 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4819 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StringCbPrintfW@@YAJPA_WIPB_WZZ ENDP			; StringCbPrintfW
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?StringCbLengthW@@YGJPB_WIPAI@Z
_TEXT	SEGMENT
_hr$ = -12						; size = 4
_cchMax$ = -8						; size = 4
_cchLength$ = -4					; size = 4
_psz$ = 8						; size = 4
_cbMax$ = 12						; size = 4
_pcbLength$ = 16					; size = 4
?StringCbLengthW@@YGJPB_WIPAI@Z PROC			; StringCbLengthW, COMDAT

; 8329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 8330 :     HRESULT hr;
; 8331 :     size_t cchMax = cbMax / sizeof(wchar_t);

	mov	eax, DWORD PTR _cbMax$[ebp]
	shr	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 8332 :     size_t cchLength = 0;

	mov	DWORD PTR _cchLength$[ebp], 0

; 8333 : 
; 8334 :     if ((psz == NULL) || (cchMax > STRSAFE_MAX_CCH))

	cmp	DWORD PTR _psz$[ebp], 0
	je	SHORT $LN5@StringCbLe
	cmp	DWORD PTR _cchMax$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@StringCbLe
$LN5@StringCbLe:

; 8335 :     {
; 8336 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 8337 :     }
; 8338 :     else

	jmp	SHORT $LN4@StringCbLe
$LN6@StringCbLe:

; 8339 :     {
; 8340 :         hr = StringLengthWorkerW(psz, cchMax, &cchLength);

	lea	ecx, DWORD PTR _cchLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchMax$[ebp]
	push	edx
	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	?StringLengthWorkerW@@YGJPB_WIPAI@Z	; StringLengthWorkerW
	mov	DWORD PTR _hr$[ebp], eax
$LN4@StringCbLe:

; 8341 :     }
; 8342 : 
; 8343 :     if (pcbLength)

	cmp	DWORD PTR _pcbLength$[ebp], 0
	je	SHORT $LN3@StringCbLe

; 8344 :     {
; 8345 :         if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@StringCbLe

; 8346 :         {
; 8347 :             // safe to multiply cchLength * sizeof(wchar_t) since cchLength < STRSAFE_MAX_CCH and sizeof(wchar_t) is 2
; 8348 :             *pcbLength = cchLength * sizeof(wchar_t);

	mov	ecx, DWORD PTR _cchLength$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _pcbLength$[ebp]
	mov	DWORD PTR [edx], ecx

; 8349 :         }
; 8350 :         else

	jmp	SHORT $LN3@StringCbLe
$LN2@StringCbLe:

; 8351 :         {
; 8352 :             *pcbLength = 0;

	mov	eax, DWORD PTR _pcbLength$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@StringCbLe:

; 8353 :         }
; 8354 :     }
; 8355 : 
; 8356 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 8357 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCbLengthW@@YGJPB_WIPAI@Z ENDP			; StringCbLengthW
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_cchOriginalMax$ = -4					; size = 4
_psz$ = 8						; size = 4
_cchMax$ = 12						; size = 4
_pcchLength$ = 16					; size = 4
?StringLengthWorkerW@@YGJPB_WIPAI@Z PROC		; StringLengthWorkerW

; 8585 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 8586 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 8587 :     size_t cchOriginalMax = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchOriginalMax$[ebp], eax
$LN6@StringLeng:

; 8588 : 
; 8589 :     while (cchMax && (*psz != L'\0'))

	cmp	DWORD PTR _cchMax$[ebp], 0
	je	SHORT $LN5@StringLeng
	mov	ecx, DWORD PTR _psz$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@StringLeng

; 8590 :     {
; 8591 :         psz++;

	mov	eax, DWORD PTR _psz$[ebp]
	add	eax, 2
	mov	DWORD PTR _psz$[ebp], eax

; 8592 :         cchMax--;

	mov	ecx, DWORD PTR _cchMax$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cchMax$[ebp], ecx

; 8593 :     }

	jmp	SHORT $LN6@StringLeng
$LN5@StringLeng:

; 8594 : 
; 8595 :     if (cchMax == 0)

	cmp	DWORD PTR _cchMax$[ebp], 0
	jne	SHORT $LN4@StringLeng

; 8596 :     {
; 8597 :         // the string is longer than cchMax
; 8598 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN4@StringLeng:

; 8599 :     }
; 8600 : 
; 8601 :     if (pcchLength)

	cmp	DWORD PTR _pcchLength$[ebp], 0
	je	SHORT $LN3@StringLeng

; 8602 :     {
; 8603 :         if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@StringLeng

; 8604 :         {
; 8605 :             *pcchLength = cchOriginalMax - cchMax;

	mov	edx, DWORD PTR _cchOriginalMax$[ebp]
	sub	edx, DWORD PTR _cchMax$[ebp]
	mov	eax, DWORD PTR _pcchLength$[ebp]
	mov	DWORD PTR [eax], edx

; 8606 :         }
; 8607 :         else

	jmp	SHORT $LN3@StringLeng
$LN2@StringLeng:

; 8608 :         {
; 8609 :             *pcchLength = 0;

	mov	ecx, DWORD PTR _pcchLength$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@StringLeng:

; 8610 :         }
; 8611 :     }
; 8612 : 
; 8613 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 8614 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringLengthWorkerW@@YGJPB_WIPAI@Z ENDP		; StringLengthWorkerW
; Function compile flags: /Odtp
_hr$ = -4						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_cchMax$ = 16						; size = 4
?StringValidateDestW@@YGJPB_WII@Z PROC			; StringValidateDestW

; 8769 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 8770 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 8771 : 
; 8772 :     if ((cchDest == 0) || (cchDest > cchMax))

	cmp	DWORD PTR _cchDest$[ebp], 0
	je	SHORT $LN1@StringVali
	mov	eax, DWORD PTR _cchDest$[ebp]
	cmp	eax, DWORD PTR _cchMax$[ebp]
	jbe	SHORT $LN2@StringVali
$LN1@StringVali:

; 8773 :     {
; 8774 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN2@StringVali:

; 8775 :     }
; 8776 : 
; 8777 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 8778 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringValidateDestW@@YGJPB_WII@Z ENDP			; StringValidateDestW
_TEXT	ENDS
EXTRN	__vsnwprintf:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hr$ = -16						; size = 4
_iRet$ = -12						; size = 4
_cchMax$ = -8						; size = 4
_cchNewDestLength$ = -4					; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pcchNewDestLength$ = 16				; size = 4
_pszFormat$ = 20					; size = 4
_argList$ = 24						; size = 4
?StringVPrintfWorkerW@@YGJPA_WIPAIPB_WPAD@Z PROC	; StringVPrintfWorkerW

; 9145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 9146 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 9147 :     int iRet;
; 9148 :     size_t cchMax;
; 9149 :     size_t cchNewDestLength = 0;

	mov	DWORD PTR _cchNewDestLength$[ebp], 0

; 9150 : 
; 9151 :     // leave the last space for the null terminator
; 9152 :     cchMax = cchDest - 1;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 9153 : 
; 9154 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9155 :     iRet = _vsnwprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9156 : #else
; 9157 :     #pragma warning(push)
; 9158 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9159 :     iRet = _vsnwprintf(pszDest, cchMax, pszFormat, argList);

	mov	ecx, DWORD PTR _argList$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFormat$[ebp]
	push	edx
	mov	eax, DWORD PTR _cchMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	push	ecx
	call	__vsnwprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iRet$[ebp], eax

; 9160 :     #pragma warning(pop)
; 9161 : #endif
; 9162 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9163 : 
; 9164 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

	cmp	DWORD PTR _iRet$[ebp], 0
	jl	SHORT $LN5@StringVPri
	mov	edx, DWORD PTR _iRet$[ebp]
	cmp	edx, DWORD PTR _cchMax$[ebp]
	jbe	SHORT $LN6@StringVPri
$LN5@StringVPri:

; 9165 :     {
; 9166 :         // need to null terminate the string
; 9167 :         pszDest += cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	ecx, DWORD PTR _pszDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pszDest$[ebp], edx

; 9168 :         *pszDest = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	mov	WORD PTR [ecx], ax

; 9169 : 
; 9170 :         cchNewDestLength = cchMax;

	mov	edx, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchNewDestLength$[ebp], edx

; 9171 : 
; 9172 :         // we have truncated pszDest
; 9173 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
	jmp	SHORT $LN4@StringVPri
$LN6@StringVPri:

; 9174 :     }
; 9175 :     else if (((size_t)iRet) == cchMax)

	mov	eax, DWORD PTR _iRet$[ebp]
	cmp	eax, DWORD PTR _cchMax$[ebp]
	jne	SHORT $LN3@StringVPri

; 9176 :     {
; 9177 :         // need to null terminate the string
; 9178 :         pszDest += cchMax;

	mov	ecx, DWORD PTR _cchMax$[ebp]
	mov	edx, DWORD PTR _pszDest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pszDest$[ebp], eax

; 9179 :         *pszDest = L'\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	mov	WORD PTR [edx], cx

; 9180 : 
; 9181 :         cchNewDestLength = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchNewDestLength$[ebp], eax

; 9182 :     }
; 9183 :     else

	jmp	SHORT $LN4@StringVPri
$LN3@StringVPri:

; 9184 :     {
; 9185 :         cchNewDestLength = (size_t)iRet;

	mov	ecx, DWORD PTR _iRet$[ebp]
	mov	DWORD PTR _cchNewDestLength$[ebp], ecx
$LN4@StringVPri:

; 9186 :     }
; 9187 : 
; 9188 :     if (pcchNewDestLength)

	cmp	DWORD PTR _pcchNewDestLength$[ebp], 0
	je	SHORT $LN1@StringVPri

; 9189 :     {
; 9190 :         *pcchNewDestLength = cchNewDestLength;

	mov	edx, DWORD PTR _pcchNewDestLength$[ebp]
	mov	eax, DWORD PTR _cchNewDestLength$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@StringVPri:

; 9191 :     }
; 9192 : 
; 9193 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 9194 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?StringVPrintfWorkerW@@YGJPA_WIPAIPB_WPAD@Z ENDP	; StringVPrintfWorkerW
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\platfdepcompile.cpp
tv92 = -12						; size = 4
tv80 = -8						; size = 4
tv65 = -4						; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FormatIosParameters@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FormatIosParameters

; 826  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 827  : 
; 828  : 	switch (pIoStack->MajorFunction) {

	mov	eax, DWORD PTR _pIoStack$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 27			; 0000001bH
	ja	$LN17@FormatIosP
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN21@FormatIosP[edx]
	jmp	DWORD PTR $LN22@FormatIosP[eax*4]
$LN16@FormatIosP:

; 829  : 		case IRP_MJ_CREATE:
; 830  : 			return FmtIopCreate(ppFmtBuf, pcbOffset, pIoStack, 
; 831  : 				pcbBufSize, hHeap);

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pIoStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	call	?FmtIopCreate@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopCreate
	add	esp, 20					; 00000014H
	jmp	$LN19@FormatIosP

; 832  : 			break;

	jmp	$LN17@FormatIosP
$LN15@FormatIosP:

; 833  : 
; 834  : 		case IRP_MJ_DEVICE_CONTROL:
; 835  : 		case IRP_MJ_INTERNAL_DEVICE_CONTROL:
; 836  : 
; 837  : 			return FmtIopDeviceControl(ppFmtBuf, pcbOffset, pIoStack, 
; 838  : 				pcbBufSize, hHeap);

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pIoStack$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	call	?FmtIopDeviceControl@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopDeviceControl
	add	esp, 20					; 00000014H
	jmp	$LN19@FormatIosP

; 839  : 			break;

	jmp	$LN17@FormatIosP
$LN14@FormatIosP:

; 840  : 
; 841  : 		case IRP_MJ_PNP:
; 842  : 			switch (pIoStack->MinorFunction) {

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv80[ebp], al
	cmp	BYTE PTR tv80[ebp], 7
	je	SHORT $LN11@FormatIosP
	jmp	SHORT $LN12@FormatIosP
$LN11@FormatIosP:

; 843  : 				case IRP_MN_QUERY_DEVICE_RELATIONS:
; 844  : 
; 845  : 					return FmtIopQueryDeviceRelations(ppFmtBuf, pcbOffset, pIoStack, 
; 846  : 						pcbBufSize, hHeap);

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pIoStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	call	?FmtIopQueryDeviceRelations@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopQueryDeviceRelations
	add	esp, 20					; 00000014H
	jmp	$LN19@FormatIosP
$LN12@FormatIosP:

; 847  : 					break;
; 848  : 			}
; 849  : 
; 850  : 			break;

	jmp	$LN17@FormatIosP
$LN10@FormatIosP:

; 851  : 
; 852  : 		case IRP_MJ_POWER:
; 853  : 			switch (pIoStack->MinorFunction) {

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv92[ebp], cl
	cmp	BYTE PTR tv92[ebp], 0
	je	SHORT $LN6@FormatIosP
	cmp	BYTE PTR tv92[ebp], 1
	jbe	SHORT $LN8@FormatIosP
	cmp	BYTE PTR tv92[ebp], 3
	jbe	SHORT $LN7@FormatIosP
	jmp	SHORT $LN8@FormatIosP
$LN7@FormatIosP:

; 854  : 
; 855  : 				case IRP_MN_QUERY_POWER:
; 856  : 				case IRP_MN_SET_POWER:
; 857  : 
; 858  : 					return FmtIopQueryPower(ppFmtBuf, pcbOffset, pIoStack, 
; 859  : 						pcbBufSize, hHeap);

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIoStack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	call	?FmtIopQueryPower@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopQueryPower
	add	esp, 20					; 00000014H
	jmp	$LN19@FormatIosP

; 860  : 
; 861  : 					break;

	jmp	SHORT $LN8@FormatIosP
$LN6@FormatIosP:

; 862  : 
; 863  : 				case IRP_MN_WAIT_WAKE:
; 864  : 
; 865  : 					return FmtIopWaitWake(ppFmtBuf, pcbOffset, pIoStack, 
; 866  : 						pcbBufSize, hHeap);

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pIoStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	call	?FmtIopWaitWake@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopWaitWake
	add	esp, 20					; 00000014H
	jmp	$LN19@FormatIosP
$LN8@FormatIosP:

; 867  : 
; 868  : 					break;
; 869  : 			}
; 870  : 			break;

	jmp	$LN17@FormatIosP
$LN5@FormatIosP:

; 871  : 
; 872  : 		case IRP_MJ_QUERY_INFORMATION:
; 873  : 
; 874  : 			return FmtIopQueryInformation(ppFmtBuf, pcbOffset, pIoStack, 
; 875  : 				pcbBufSize, hHeap);

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pIoStack$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	call	?FmtIopQueryInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopQueryInformation
	add	esp, 20					; 00000014H
	jmp	$LN19@FormatIosP

; 876  : 			break;

	jmp	SHORT $LN17@FormatIosP
$LN4@FormatIosP:

; 877  : 
; 878  : 		case IRP_MJ_QUERY_VOLUME_INFORMATION:
; 879  : 
; 880  : 			return FmtIopQueryVolumeInformation(ppFmtBuf, pcbOffset, pIoStack, 
; 881  : 				pcbBufSize, hHeap);

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIoStack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	call	?FmtIopQueryVolumeInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopQueryVolumeInformation
	add	esp, 20					; 00000014H
	jmp	SHORT $LN19@FormatIosP

; 882  : 			break;

	jmp	SHORT $LN17@FormatIosP
$LN3@FormatIosP:

; 883  : 
; 884  : 		case IRP_MJ_READ:
; 885  : 
; 886  : 			return FmtIopRead(ppFmtBuf, pcbOffset, pIoStack, 
; 887  : 				pcbBufSize, hHeap);

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pIoStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	call	?FmtIopRead@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopRead
	add	esp, 20					; 00000014H
	jmp	SHORT $LN19@FormatIosP

; 888  : 			break;

	jmp	SHORT $LN17@FormatIosP
$LN2@FormatIosP:

; 889  : 
; 890  : 		case IRP_MJ_SET_INFORMATION:
; 891  : 
; 892  : 			return FmtIopSetInformation(ppFmtBuf, pcbOffset, pIoStack, 
; 893  : 				pcbBufSize, hHeap);

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pIoStack$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	call	?FmtIopSetInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopSetInformation
	add	esp, 20					; 00000014H
	jmp	SHORT $LN19@FormatIosP

; 894  : 			break;

	jmp	SHORT $LN17@FormatIosP
$LN1@FormatIosP:

; 895  : 
; 896  : 		case IRP_MJ_WRITE:
; 897  : 
; 898  : 			return FmtIopWrite(ppFmtBuf, pcbOffset, pIoStack, 
; 899  : 				pcbBufSize, hHeap);

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIoStack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	call	?FmtIopWrite@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ; FmtIopWrite
	add	esp, 20					; 00000014H
	jmp	SHORT $LN19@FormatIosP
$LN17@FormatIosP:

; 900  : 			break;
; 901  : 
; 902  : 	}
; 903  : 	return TRUE;

	mov	eax, 1
$LN19@FormatIosP:

; 904  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@FormatIosP:
	DD	$LN16@FormatIosP
	DD	$LN3@FormatIosP
	DD	$LN1@FormatIosP
	DD	$LN5@FormatIosP
	DD	$LN2@FormatIosP
	DD	$LN4@FormatIosP
	DD	$LN15@FormatIosP
	DD	$LN10@FormatIosP
	DD	$LN14@FormatIosP
	DD	$LN17@FormatIosP
$LN21@FormatIosP:
	DB	0
	DB	9
	DB	9
	DB	1
	DB	2
	DB	3
	DB	4
	DB	9
	DB	9
	DB	9
	DB	5
	DB	9
	DB	9
	DB	9
	DB	6
	DB	6
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
?FormatIosParameters@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FormatIosParameters
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopCreate@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopCreate

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 306  : 	BOOL	bRet;
; 307  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 308  : 
; 309  : 	FORMAT_ITEM(
; 310  : 		wszItemBuf, 
; 311  : 		L"Parameters.Create.SecurityContext =             %#p",
; 312  : 		pIoStack->Parameters.Create.SecurityContext,
; 313  : 		ppFmtBuf,
; 314  : 		pcbOffset,
; 315  : 		pcbBufSize,
; 316  : 		hHeap,
; 317  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70631
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 318  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN5@FmtIopCrea
	xor	eax, eax
	jmp	$LN6@FmtIopCrea
$LN5@FmtIopCrea:

; 319  : 
; 320  : 	FORMAT_ITEM(
; 321  : 		wszItemBuf, 
; 322  : 		L"Parameters.Create.Options =                     %#x",
; 323  : 		pIoStack->Parameters.Create.Options,
; 324  : 		ppFmtBuf,
; 325  : 		pcbOffset,
; 326  : 		pcbBufSize,
; 327  : 		hHeap,
; 328  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG70633
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 329  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN4@FmtIopCrea
	xor	eax, eax
	jmp	$LN6@FmtIopCrea
$LN4@FmtIopCrea:

; 330  : 
; 331  : 	FORMAT_ITEM(
; 332  : 		wszItemBuf, 
; 333  : 		L"Parameters.Create.FileAttributes =              %#x",
; 334  : 		pIoStack->Parameters.Create.FileAttributes,
; 335  : 		ppFmtBuf,
; 336  : 		pcbOffset,
; 337  : 		pcbBufSize,
; 338  : 		hHeap,
; 339  : 		bRet)

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	push	edx
	push	OFFSET $SG70635
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 340  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN3@FmtIopCrea
	xor	eax, eax
	jmp	$LN6@FmtIopCrea
$LN3@FmtIopCrea:

; 341  : 
; 342  : 	FORMAT_ITEM(
; 343  : 		wszItemBuf, 
; 344  : 		L"Parameters.Create.ShareAccess =                 %#x",
; 345  : 		pIoStack->Parameters.Create.ShareAccess,
; 346  : 		ppFmtBuf,
; 347  : 		pcbOffset,
; 348  : 		pcbBufSize,
; 349  : 		hHeap,
; 350  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	movzx	ecx, WORD PTR [eax+18]
	push	ecx
	push	OFFSET $SG70637
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 351  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopCrea
	xor	eax, eax
	jmp	SHORT $LN6@FmtIopCrea
$LN2@FmtIopCrea:

; 352  : 
; 353  : 	FORMAT_ITEM(
; 354  : 		wszItemBuf, 
; 355  : 		L"Parameters.Create.EaLength	 =                %#x",
; 356  : 		pIoStack->Parameters.Create.EaLength,
; 357  : 		ppFmtBuf,
; 358  : 		pcbOffset,
; 359  : 		pcbBufSize,
; 360  : 		hHeap,
; 361  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	push	OFFSET $SG70639
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 362  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopCrea
	xor	eax, eax
	jmp	SHORT $LN6@FmtIopCrea
$LN1@FmtIopCrea:

; 363  : 
; 364  : 	return TRUE;

	mov	eax, 1
$LN6@FmtIopCrea:

; 365  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopCreate@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopCreate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopDeviceControl@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopDeviceControl

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 376  : 	BOOL	bRet;
; 377  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 378  : 
; 379  : 	FORMAT_ITEM(
; 380  : 		wszItemBuf, 
; 381  : 		L"Parameters.DeviceIoControl.OutputBufferLength = %#x",
; 382  : 		pIoStack->Parameters.DeviceIoControl.OutputBufferLength,
; 383  : 		ppFmtBuf,
; 384  : 		pcbOffset,
; 385  : 		pcbBufSize,
; 386  : 		hHeap,
; 387  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70650
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 388  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN4@FmtIopDevi
	xor	eax, eax
	jmp	$LN5@FmtIopDevi
$LN4@FmtIopDevi:

; 389  : 
; 390  : 	FORMAT_ITEM(
; 391  : 		wszItemBuf, 
; 392  : 		L"Parameters.DeviceIoControl.InputBufferLength =  %#x",
; 393  : 		pIoStack->Parameters.DeviceIoControl.InputBufferLength,
; 394  : 		ppFmtBuf,
; 395  : 		pcbOffset,
; 396  : 		pcbBufSize,
; 397  : 		hHeap,
; 398  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET $SG70652
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 399  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN3@FmtIopDevi
	xor	eax, eax
	jmp	$LN5@FmtIopDevi
$LN3@FmtIopDevi:

; 400  : 
; 401  : 	FORMAT_ITEM(
; 402  : 		wszItemBuf, 
; 403  : 		L"Parameters.DeviceIoControl.IoControlCode =      %#x",
; 404  : 		pIoStack->Parameters.DeviceIoControl.IoControlCode,
; 405  : 		ppFmtBuf,
; 406  : 		pcbOffset,
; 407  : 		pcbBufSize,
; 408  : 		hHeap,
; 409  : 		bRet)

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	OFFSET $SG70654
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 410  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopDevi
	xor	eax, eax
	jmp	SHORT $LN5@FmtIopDevi
$LN2@FmtIopDevi:

; 411  : 
; 412  : 	FORMAT_ITEM(
; 413  : 		wszItemBuf, 
; 414  : 		L"Parameters.DeviceIoControl.Type3InputBuffer =   %#p",
; 415  : 		pIoStack->Parameters.DeviceIoControl.Type3InputBuffer,
; 416  : 		ppFmtBuf,
; 417  : 		pcbOffset,
; 418  : 		pcbBufSize,
; 419  : 		hHeap,
; 420  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	push	OFFSET $SG70656
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 421  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopDevi
	xor	eax, eax
	jmp	SHORT $LN5@FmtIopDevi
$LN1@FmtIopDevi:

; 422  : 
; 423  : 	return TRUE;

	mov	eax, 1
$LN5@FmtIopDevi:

; 424  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopDeviceControl@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopDeviceControl
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -428						; size = 4
_wszItemBuf$ = -424					; size = 202
_wszRelType$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopQueryDeviceRelations@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopQueryDeviceRelations

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 435  : 	BOOL	bRet;
; 436  : 	WCHAR	wszRelType[FMTIRP_ITEM_BUF_SIZE];
; 437  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 438  : 
; 439  : 	DecodeRelType(wszRelType, sizeof wszRelType, 
; 440  : 		pIoStack->Parameters.QueryDeviceRelations.Type);

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszRelType$[ebp]
	push	edx
	call	?DecodeRelType@@YAPA_WPA_WKW4_DEVICE_RELATION_TYPE@@@Z ; DecodeRelType
	add	esp, 12					; 0000000cH

; 441  : 
; 442  : 	FORMAT_ITEM(
; 443  : 		wszItemBuf, 
; 444  : 		L"Parameters.QueryDeviceRelations.Type =          %s",
; 445  : 		wszRelType,
; 446  : 		ppFmtBuf,
; 447  : 		pcbOffset,
; 448  : 		pcbBufSize,
; 449  : 		hHeap,
; 450  : 		bRet)

	lea	eax, DWORD PTR _wszRelType$[ebp]
	push	eax
	push	OFFSET $SG70668
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 451  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopQuer
	xor	eax, eax
	jmp	SHORT $LN2@FmtIopQuer
$LN1@FmtIopQuer:

; 452  : 
; 453  : 	return TRUE;

	mov	eax, 1
$LN2@FmtIopQuer:

; 454  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopQueryDeviceRelations@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopQueryDeviceRelations
_TEXT	ENDS
EXTRN	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z:PROC	; DecodeEnum
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wszOutBuf$ = 8						; size = 4
_cbBufSize$ = 12					; size = 4
_DRType$ = 16						; size = 4
?DecodeRelType@@YAPA_WPA_WKW4_DEVICE_RELATION_TYPE@@@Z PROC ; DecodeRelType

; 271  : {

	push	ebp
	mov	ebp, esp

; 272  : 	return DecodeEnum(
; 273  : 		DRType,
; 274  : 		0,
; 275  : 		pwszDeviceRelationTypeV,
; 276  : 		sizeof pwszDeviceRelationTypeV / sizeof (PWSTR),
; 277  : 		wszOutBuf,
; 278  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wszOutBuf$[ebp]
	push	ecx
	push	6
	push	OFFSET _pwszDeviceRelationTypeV
	push	0
	mov	edx, DWORD PTR _DRType$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 279  : }

	pop	ebp
	ret	0
?DecodeRelType@@YAPA_WPA_WKW4_DEVICE_RELATION_TYPE@@@Z ENDP ; DecodeRelType
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopQueryInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopQueryInformation

; 464  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 465  : 	BOOL	bRet;
; 466  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 467  : 
; 468  : 	FORMAT_ITEM(
; 469  : 		wszItemBuf, 
; 470  : 		L"Parameters.QueryFile.Length =                   %#x",
; 471  : 		pIoStack->Parameters.QueryFile.Length,
; 472  : 		ppFmtBuf,
; 473  : 		pcbOffset,
; 474  : 		pcbBufSize,
; 475  : 		hHeap,
; 476  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70679
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 477  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopQuer@2
	xor	eax, eax
	jmp	SHORT $LN3@FmtIopQuer@2
$LN2@FmtIopQuer@2:

; 478  : 
; 479  : 	FORMAT_ITEM(
; 480  : 		wszItemBuf, 
; 481  : 		L"Parameters.QueryFile.FileInformationClass =     %d",
; 482  : 		pIoStack->Parameters.QueryFile.FileInformationClass,
; 483  : 		ppFmtBuf,
; 484  : 		pcbOffset,
; 485  : 		pcbBufSize,
; 486  : 		hHeap,
; 487  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET $SG70681
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 488  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopQuer@2
	xor	eax, eax
	jmp	SHORT $LN3@FmtIopQuer@2
$LN1@FmtIopQuer@2:

; 489  : 
; 490  : 	return TRUE;

	mov	eax, 1
$LN3@FmtIopQuer@2:

; 491  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopQueryInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopQueryInformation
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wszDecoded$ = -432					; size = 202
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopQueryPower@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopQueryPower

; 501  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 502  : 	BOOL	bRet;
; 503  : 	WCHAR	wszDecoded[FMTIRP_ITEM_BUF_SIZE];
; 504  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 505  : 
; 506  : 	FORMAT_ITEM(
; 507  : 		wszItemBuf, 
; 508  : 		L"Parameters.Power.SystemContext =                %#x",
; 509  : 		pIoStack->Parameters.Power.SystemContext,
; 510  : 		ppFmtBuf,
; 511  : 		pcbOffset,
; 512  : 		pcbBufSize,
; 513  : 		hHeap,
; 514  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70693
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 515  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN5@FmtIopQuer@3
	xor	eax, eax
	jmp	$LN6@FmtIopQuer@3
$LN5@FmtIopQuer@3:

; 516  : 
; 517  : 	DecodePowerStateType(wszDecoded, sizeof wszDecoded, 
; 518  : 		pIoStack->Parameters.Power.Type);

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszDecoded$[ebp]
	push	ecx
	call	?DecodePowerStateType@@YAPA_WPA_WKW4_POWER_STATE_TYPE@@@Z ; DecodePowerStateType
	add	esp, 12					; 0000000cH

; 519  : 	FORMAT_ITEM(
; 520  : 		wszItemBuf, 
; 521  : 		L"Parameters.Power.Type =                         %s",
; 522  : 		wszDecoded,
; 523  : 		ppFmtBuf,
; 524  : 		pcbOffset,
; 525  : 		pcbBufSize,
; 526  : 		hHeap,
; 527  : 		bRet)

	lea	edx, DWORD PTR _wszDecoded$[ebp]
	push	edx
	push	OFFSET $SG70695
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 528  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN4@FmtIopQuer@3
	xor	eax, eax
	jmp	$LN6@FmtIopQuer@3
$LN4@FmtIopQuer@3:

; 529  : 
; 530  : 	DecodeSystemPowerState(wszDecoded, sizeof wszDecoded, 
; 531  : 		pIoStack->Parameters.Power.State.SystemState);

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszDecoded$[ebp]
	push	edx
	call	?DecodeSystemPowerState@@YAPA_WPA_WKW4_SYSTEM_POWER_STATE@@@Z ; DecodeSystemPowerState
	add	esp, 12					; 0000000cH

; 532  : 	FORMAT_ITEM(
; 533  : 		wszItemBuf, 
; 534  : 		L"Parameters.Power.State.SystemState =            %s",
; 535  : 		wszDecoded,
; 536  : 		ppFmtBuf,
; 537  : 		pcbOffset,
; 538  : 		pcbBufSize,
; 539  : 		hHeap,
; 540  : 		bRet)

	lea	eax, DWORD PTR _wszDecoded$[ebp]
	push	eax
	push	OFFSET $SG70697
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 541  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN3@FmtIopQuer@3
	xor	eax, eax
	jmp	$LN6@FmtIopQuer@3
$LN3@FmtIopQuer@3:

; 542  : 
; 543  : 	DecodeDevicePowerState(wszDecoded, sizeof wszDecoded, 
; 544  : 		pIoStack->Parameters.Power.State.DeviceState);

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszDecoded$[ebp]
	push	eax
	call	?DecodeDevicePowerState@@YAPA_WPA_WKW4_DEVICE_POWER_STATE@@@Z ; DecodeDevicePowerState
	add	esp, 12					; 0000000cH

; 545  : 	FORMAT_ITEM(
; 546  : 		wszItemBuf, 
; 547  : 		L"Parameters.Power.State.DeviceState =            %s",
; 548  : 		wszDecoded,
; 549  : 		ppFmtBuf,
; 550  : 		pcbOffset,
; 551  : 		pcbBufSize,
; 552  : 		hHeap,
; 553  : 		bRet)

	lea	ecx, DWORD PTR _wszDecoded$[ebp]
	push	ecx
	push	OFFSET $SG70699
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 554  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopQuer@3
	xor	eax, eax
	jmp	SHORT $LN6@FmtIopQuer@3
$LN2@FmtIopQuer@3:

; 555  : 
; 556  : 	DecodePowerAction(wszDecoded, sizeof wszDecoded, 
; 557  : 		pIoStack->Parameters.Power.ShutdownType);

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszDecoded$[ebp]
	push	ecx
	call	?DecodePowerAction@@YAPA_WPA_WKW4POWER_ACTION@@@Z ; DecodePowerAction
	add	esp, 12					; 0000000cH

; 558  : 	FORMAT_ITEM(
; 559  : 		wszItemBuf, 
; 560  : 		L"Parameters.Power.ShutdownType =                 %s",
; 561  : 		wszDecoded,
; 562  : 		ppFmtBuf,
; 563  : 		pcbOffset,
; 564  : 		pcbBufSize,
; 565  : 		hHeap,
; 566  : 		bRet)

	lea	edx, DWORD PTR _wszDecoded$[ebp]
	push	edx
	push	OFFSET $SG70701
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 567  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopQuer@3
	xor	eax, eax
	jmp	SHORT $LN6@FmtIopQuer@3
$LN1@FmtIopQuer@3:

; 568  : 
; 569  : 	return TRUE;

	mov	eax, 1
$LN6@FmtIopQuer@3:

; 570  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopQueryPower@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopQueryPower
; Function compile flags: /Odtp
_wszOutBuf$ = 8					; size = 4
_cbBufSize$ = 12					; size = 4
_DevPState$ = 16					; size = 4
?DecodeDevicePowerState@@YAPA_WPA_WKW4_DEVICE_POWER_STATE@@@Z PROC ; DecodeDevicePowerState

; 208  : {

	push	ebp
	mov	ebp, esp

; 209  : 	return DecodeEnum(
; 210  : 		DevPState,
; 211  : 		0,
; 212  : 		pwszDevicePowerStateV,
; 213  : 		sizeof pwszDevicePowerStateV / sizeof (PWSTR),
; 214  : 		wszOutBuf,
; 215  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wszOutBuf$[ebp]
	push	ecx
	push	6
	push	OFFSET _pwszDevicePowerStateV
	push	0
	mov	edx, DWORD PTR _DevPState$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 216  : }

	pop	ebp
	ret	0
?DecodeDevicePowerState@@YAPA_WPA_WKW4_DEVICE_POWER_STATE@@@Z ENDP ; DecodeDevicePowerState
; Function compile flags: /Odtp
_wszOutBuf$ = 8					; size = 4
_cbBufSize$ = 12					; size = 4
_Action$ = 16						; size = 4
?DecodePowerAction@@YAPA_WPA_WKW4POWER_ACTION@@@Z PROC	; DecodePowerAction

; 240  : {

	push	ebp
	mov	ebp, esp

; 241  : 	return DecodeEnum(
; 242  : 		Action,
; 243  : 		0, 
; 244  : 		pwszPowerActionV,
; 245  : 		sizeof pwszPowerActionV / sizeof (PWSTR), 
; 246  : 		wszOutBuf, 
; 247  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wszOutBuf$[ebp]
	push	ecx
	push	8
	push	OFFSET _pwszPowerActionV
	push	0
	mov	edx, DWORD PTR _Action$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 248  : }

	pop	ebp
	ret	0
?DecodePowerAction@@YAPA_WPA_WKW4POWER_ACTION@@@Z ENDP	; DecodePowerAction
; Function compile flags: /Odtp
_wszOutBuf$ = 8					; size = 4
_cbBufSize$ = 12					; size = 4
_PSType$ = 16						; size = 4
?DecodePowerStateType@@YAPA_WPA_WKW4_POWER_STATE_TYPE@@@Z PROC ; DecodePowerStateType

; 255  : {

	push	ebp
	mov	ebp, esp

; 256  : 	return DecodeEnum(
; 257  : 		PSType,
; 258  : 		0,
; 259  : 		pwszPowerStateTypeV,
; 260  : 		sizeof pwszPowerStateTypeV / sizeof (PWSTR),
; 261  : 		wszOutBuf,
; 262  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wszOutBuf$[ebp]
	push	ecx
	push	2
	push	OFFSET _pwszPowerStateTypeV
	push	0
	mov	edx, DWORD PTR _PSType$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 263  : }

	pop	ebp
	ret	0
?DecodePowerStateType@@YAPA_WPA_WKW4_POWER_STATE_TYPE@@@Z ENDP ; DecodePowerStateType
; Function compile flags: /Odtp
_wszOutBuf$ = 8					; size = 4
_cbBufSize$ = 12					; size = 4
_SysPState$ = 16					; size = 4
?DecodeSystemPowerState@@YAPA_WPA_WKW4_SYSTEM_POWER_STATE@@@Z PROC ; DecodeSystemPowerState

; 287  : {

	push	ebp
	mov	ebp, esp

; 288  : 	return DecodeEnum(
; 289  : 		SysPState,
; 290  : 		0,
; 291  : 		pwszSystemPowerStateV,
; 292  : 		sizeof pwszSystemPowerStateV / sizeof (PWSTR),
; 293  : 		wszOutBuf,
; 294  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wszOutBuf$[ebp]
	push	ecx
	push	8
	push	OFFSET _pwszSystemPowerStateV
	push	0
	mov	edx, DWORD PTR _SysPState$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 295  : }

	pop	ebp
	ret	0
?DecodeSystemPowerState@@YAPA_WPA_WKW4_SYSTEM_POWER_STATE@@@Z ENDP ; DecodeSystemPowerState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wszDecoded$ = -432					; size = 202
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopQueryVolumeInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopQueryVolumeInformation

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 583  : 	BOOL	bRet;
; 584  : 	WCHAR	wszDecoded[FMTIRP_ITEM_BUF_SIZE];
; 585  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 586  : 
; 587  : 	FORMAT_ITEM(
; 588  : 		wszItemBuf, 
; 589  : 		L"Parameters.QueryVolume.FsInformationClass =     %s",
; 590  : 		DecodeFsInfoClass(wszDecoded, sizeof wszDecoded, 
; 591  : 			pIoStack->Parameters.QueryVolume.FsInformationClass),
; 592  : 		ppFmtBuf,
; 593  : 		pcbOffset,
; 594  : 		pcbBufSize,
; 595  : 		hHeap,
; 596  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszDecoded$[ebp]
	push	edx
	call	?DecodeFsInfoClass@@YAPA_WPA_WKW4_FSINFOCLASS@@@Z ; DecodeFsInfoClass
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET $SG70713
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 597  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopQuer@4
	xor	eax, eax
	jmp	SHORT $LN2@FmtIopQuer@4
$LN1@FmtIopQuer@4:

; 598  : 
; 599  : 	return TRUE;

	mov	eax, 1
$LN2@FmtIopQuer@4:

; 600  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopQueryVolumeInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopQueryVolumeInformation
; Function compile flags: /Odtp
_wszOutBuf$ = 8					; size = 4
_cbBufSize$ = 12					; size = 4
_FsInfoClass$ = 16					; size = 4
?DecodeFsInfoClass@@YAPA_WPA_WKW4_FSINFOCLASS@@@Z PROC	; DecodeFsInfoClass

; 224  : {

	push	ebp
	mov	ebp, esp

; 225  : 	return DecodeEnum(
; 226  : 		FsInfoClass,
; 227  : 		1, 
; 228  : 		pwszFsInfoClassV,
; 229  : 		sizeof pwszFsInfoClassV / sizeof (PWSTR), 
; 230  : 		wszOutBuf, 
; 231  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wszOutBuf$[ebp]
	push	ecx
	push	10					; 0000000aH
	push	OFFSET _pwszFsInfoClassV
	push	1
	mov	edx, DWORD PTR _FsInfoClass$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 232  : }

	pop	ebp
	ret	0
?DecodeFsInfoClass@@YAPA_WPA_WKW4_FSINFOCLASS@@@Z ENDP	; DecodeFsInfoClass
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopRead@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopRead

; 609  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 610  : 	BOOL	bRet;
; 611  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 612  : 
; 613  : 	FORMAT_ITEM(
; 614  : 		wszItemBuf, 
; 615  : 		L"Parameters.Read.Length =                        %#x",
; 616  : 		pIoStack->Parameters.Read.Length,
; 617  : 		ppFmtBuf,
; 618  : 		pcbOffset,
; 619  : 		pcbBufSize,
; 620  : 		hHeap,
; 621  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70724
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 622  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN3@FmtIopRead
	xor	eax, eax
	jmp	$LN4@FmtIopRead
$LN3@FmtIopRead:

; 623  : 
; 624  : 	FORMAT_ITEM(
; 625  : 		wszItemBuf, 
; 626  : 		L"Parameters.Read.Key =                           %#x",
; 627  : 		pIoStack->Parameters.Read.Key,
; 628  : 		ppFmtBuf,
; 629  : 		pcbOffset,
; 630  : 		pcbBufSize,
; 631  : 		hHeap,
; 632  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET $SG70726
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 633  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopRead
	xor	eax, eax
	jmp	SHORT $LN4@FmtIopRead
$LN2@FmtIopRead:

; 634  : 
; 635  : 	FORMAT_ITEM(
; 636  : 		wszItemBuf, 
; 637  : 		L"Parameters.Read.ByteOffset =                    %#I64x",
; 638  : 		pIoStack->Parameters.Read.ByteOffset.QuadPart,
; 639  : 		ppFmtBuf,
; 640  : 		pcbOffset,
; 641  : 		pcbBufSize,
; 642  : 		hHeap,
; 643  : 		bRet)

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	push	OFFSET $SG70728
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 644  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopRead
	xor	eax, eax
	jmp	SHORT $LN4@FmtIopRead
$LN1@FmtIopRead:

; 645  : 
; 646  : 	return TRUE;

	mov	eax, 1
$LN4@FmtIopRead:

; 647  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopRead@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopRead
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopSetInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopSetInformation

; 657  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 658  : 	BOOL	bRet;
; 659  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 660  : 
; 661  : 	FORMAT_ITEM(
; 662  : 		wszItemBuf, 
; 663  : 		L"Parameters.SetFile.Length =                     %#x",
; 664  : 		pIoStack->Parameters.SetFile.Length,
; 665  : 		ppFmtBuf,
; 666  : 		pcbOffset,
; 667  : 		pcbBufSize,
; 668  : 		hHeap,
; 669  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70739
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 670  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN7@FmtIopSetI
	xor	eax, eax
	jmp	$LN8@FmtIopSetI
$LN7@FmtIopSetI:

; 671  : 
; 672  : 	FORMAT_ITEM(
; 673  : 		wszItemBuf, 
; 674  : 		L"Parameters.SetFile.FileInformationClass =       %d",
; 675  : 		pIoStack->Parameters.SetFile.FileInformationClass,
; 676  : 		ppFmtBuf,
; 677  : 		pcbOffset,
; 678  : 		pcbBufSize,
; 679  : 		hHeap,
; 680  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET $SG70741
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 681  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN6@FmtIopSetI
	xor	eax, eax
	jmp	$LN8@FmtIopSetI
$LN6@FmtIopSetI:

; 682  : 
; 683  : 	FORMAT_ITEM(
; 684  : 		wszItemBuf, 
; 685  : 		L"Parameters.SetFile.FileObject =                 %#p",
; 686  : 		pIoStack->Parameters.SetFile.FileObject,
; 687  : 		ppFmtBuf,
; 688  : 		pcbOffset,
; 689  : 		pcbBufSize,
; 690  : 		hHeap,
; 691  : 		bRet)

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	OFFSET $SG70743
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 692  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN5@FmtIopSetI
	xor	eax, eax
	jmp	$LN8@FmtIopSetI
$LN5@FmtIopSetI:

; 693  : 
; 694  : 	FORMAT_ITEM(
; 695  : 		wszItemBuf, 
; 696  : 		L"Parameters.SetFile.ReplaceIfExists =            %d",
; 697  : 		pIoStack->Parameters.SetFile.ReplaceIfExists,
; 698  : 		ppFmtBuf,
; 699  : 		pcbOffset,
; 700  : 		pcbBufSize,
; 701  : 		hHeap,
; 702  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	push	ecx
	push	OFFSET $SG70745
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 703  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN4@FmtIopSetI
	xor	eax, eax
	jmp	$LN8@FmtIopSetI
$LN4@FmtIopSetI:

; 704  : 
; 705  : 	FORMAT_ITEM(
; 706  : 		wszItemBuf, 
; 707  : 		L"Parameters.SetFile.AdvanceOnly =                %d",
; 708  : 		pIoStack->Parameters.SetFile.AdvanceOnly,
; 709  : 		ppFmtBuf,
; 710  : 		pcbOffset,
; 711  : 		pcbBufSize,
; 712  : 		hHeap,
; 713  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	push	eax
	push	OFFSET $SG70747
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 714  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN3@FmtIopSetI
	xor	eax, eax
	jmp	$LN8@FmtIopSetI
$LN3@FmtIopSetI:

; 715  : 
; 716  : 	FORMAT_ITEM(
; 717  : 		wszItemBuf, 
; 718  : 		L"Parameters.SetFile.ClusterCount =               %#x",
; 719  : 		pIoStack->Parameters.SetFile.ClusterCount,
; 720  : 		ppFmtBuf,
; 721  : 		pcbOffset,
; 722  : 		pcbBufSize,
; 723  : 		hHeap,
; 724  : 		bRet)

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	OFFSET $SG70749
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 725  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopSetI
	xor	eax, eax
	jmp	SHORT $LN8@FmtIopSetI
$LN2@FmtIopSetI:

; 726  : 
; 727  : 	FORMAT_ITEM(
; 728  : 		wszItemBuf, 
; 729  : 		L"Parameters.SetFile.DeleteHandle =               %#x",
; 730  : 		pIoStack->Parameters.SetFile.DeleteHandle,
; 731  : 		ppFmtBuf,
; 732  : 		pcbOffset,
; 733  : 		pcbBufSize,
; 734  : 		hHeap,
; 735  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	OFFSET $SG70751
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 736  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopSetI
	xor	eax, eax
	jmp	SHORT $LN8@FmtIopSetI
$LN1@FmtIopSetI:

; 737  : 
; 738  : 	return TRUE;

	mov	eax, 1
$LN8@FmtIopSetI:

; 739  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopSetInformation@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopSetInformation
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wszDecoded$ = -432					; size = 202
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopWaitWake@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopWaitWake

; 749  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 750  : 	BOOL	bRet;
; 751  : 	WCHAR	wszDecoded[FMTIRP_ITEM_BUF_SIZE];
; 752  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 753  : 
; 754  : 	FORMAT_ITEM(
; 755  : 		wszItemBuf, 
; 756  : 		L"Parameters.WaitWake.PowerState =                %s",
; 757  : 		DecodeSystemPowerState(
; 758  : 			wszDecoded,
; 759  : 			sizeof wszDecoded,
; 760  : 			pIoStack->Parameters.WaitWake.PowerState),
; 761  : 		ppFmtBuf,
; 762  : 		pcbOffset,
; 763  : 		pcbBufSize,
; 764  : 		hHeap,
; 765  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszDecoded$[ebp]
	push	edx
	call	?DecodeSystemPowerState@@YAPA_WPA_WKW4_SYSTEM_POWER_STATE@@@Z ; DecodeSystemPowerState
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET $SG70763
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppFmtBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 766  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopWait
	xor	eax, eax
	jmp	SHORT $LN2@FmtIopWait
$LN1@FmtIopWait:

; 767  : 
; 768  : 	return TRUE;

	mov	eax, 1
$LN2@FmtIopWait:

; 769  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopWaitWake@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopWaitWake
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bRet$ = -220						; size = 4
_wszItemBuf$ = -216					; size = 202
__$ArrayPad$ = -4					; size = 4
_ppFmtBuf$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pIoStack$ = 16						; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?FmtIopWrite@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z PROC ; FmtIopWrite

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 779  : 	BOOL	bRet;
; 780  : 	WCHAR	wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 781  : 
; 782  : 	FORMAT_ITEM(
; 783  : 		wszItemBuf, 
; 784  : 		L"Parameters.Write.Length =                       %#x",
; 785  : 		pIoStack->Parameters.Write.Length,
; 786  : 		ppFmtBuf,
; 787  : 		pcbOffset,
; 788  : 		pcbBufSize,
; 789  : 		hHeap,
; 790  : 		bRet)

	mov	eax, DWORD PTR _pIoStack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG70774
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcbOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppFmtBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 791  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN3@FmtIopWrit
	xor	eax, eax
	jmp	$LN4@FmtIopWrit
$LN3@FmtIopWrit:

; 792  : 
; 793  : 	FORMAT_ITEM(
; 794  : 		wszItemBuf, 
; 795  : 		L"Parameters.Write.Key =                          %#x",
; 796  : 		pIoStack->Parameters.Write.Key,
; 797  : 		ppFmtBuf,
; 798  : 		pcbOffset,
; 799  : 		pcbBufSize,
; 800  : 		hHeap,
; 801  : 		bRet)

	mov	edx, DWORD PTR _pIoStack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET $SG70776
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 802  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN2@FmtIopWrit
	xor	eax, eax
	jmp	SHORT $LN4@FmtIopWrit
$LN2@FmtIopWrit:

; 803  : 
; 804  : 	FORMAT_ITEM(
; 805  : 		wszItemBuf, 
; 806  : 		L"Parameters.Write.ByteOffset =                   %#I64x",
; 807  : 		pIoStack->Parameters.Write.ByteOffset,
; 808  : 		ppFmtBuf,
; 809  : 		pcbOffset,
; 810  : 		pcbBufSize,
; 811  : 		hHeap,
; 812  : 		bRet)

	mov	ecx, DWORD PTR _pIoStack$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	push	OFFSET $SG70778
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?AppendString@@YAHPA_WPAPADPAK2PAX@Z	; AppendString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _bRet$[ebp], eax

; 813  : 	if (!bRet) return FALSE;

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FmtIopWrit
	xor	eax, eax
	jmp	SHORT $LN4@FmtIopWrit
$LN1@FmtIopWrit:

; 814  : 
; 815  : 	return TRUE;

	mov	eax, 1
$LN4@FmtIopWrit:

; 816  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FmtIopWrite@@YAHPAPADPAKPAU_IO_STACK_LOCATION@@1PAX@Z ENDP ; FmtIopWrite
_TEXT	ENDS
PUBLIC	?FormatIrpWin7X64@@YAHPADPAPA_W@Z		; FormatIrpWin7X64
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\win7x64.cpp
_TEXT	SEGMENT
_pIrpData$ = 8						; size = 4
_ppFIrp$ = 12						; size = 4
?FormatIrpWin7X64@@YAHPADPAPA_W@Z PROC			; FormatIrpWin7X64

; 38   : {

	push	ebp
	mov	ebp, esp

; 39   : 	return FormatIrpGeneric(
; 40   : 		pIrpData,
; 41   : 		ppFIrp);

	mov	eax, DWORD PTR _ppFIrp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIrpData$[ebp]
	push	ecx
	call	?FormatIrpGeneric@@YAHPADPAPA_W@Z	; FormatIrpGeneric
	add	esp, 8

; 42   : }

	pop	ebp
	ret	0
?FormatIrpWin7X64@@YAHPADPAPA_W@Z ENDP			; FormatIrpWin7X64
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\platfdepcompile.cpp
_TEXT	SEGMENT
_cbItemLen$ = -364					; size = 4
_wszItemBuf$ = -360					; size = 202
_cbOffset$ = -148					; size = 4
_bRet$ = -144						; size = 4
_pFIrp$ = -140						; size = 4
_BufSize$ = -136					; size = 4
_hHeap$ = -132						; size = 4
_Irp$ = -128						; size = 112
__$ArrayPad$ = -4					; size = 4
_pIrpData$ = 8						; size = 4
_ppFIrp$ = 12						; size = 4
?FormatIrpGeneric@@YAHPADPAPA_W@Z PROC			; FormatIrpGeneric

; 1038 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1039 : 	BOOL		bRet ;
; 1040 : 	SIZE_T		BufSize;
; 1041 : 	HANDLE		hHeap;
; 1042 : 	IRP			Irp;
; 1043 : 	WCHAR		wszItemBuf[FMTIRP_ITEM_BUF_SIZE];
; 1044 : 	PCHAR		pFIrp;
; 1045 : 
; 1046 : 
; 1047 : 	// We cannot be sure that the address in pIrpData satisfies the
; 1048 : 	// alignment requirement for the IRP type, so we allocate Irp
; 1049 : 	// on the stack, which is properly aligned and then we copy
; 1050 : 	// the data pointed by pIrpData into it.
; 1051 : 	//
; 1052 : 	memcpy(&Irp, pIrpData, sizeof Irp);

	push	112					; 00000070H
	mov	eax, DWORD PTR _pIrpData$[ebx]
	push	eax
	lea	ecx, DWORD PTR _Irp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1053 : 
; 1054 : 	hHeap = GetProcessHeap();

	call	DWORD PTR __imp__GetProcessHeap@0
	mov	DWORD PTR _hHeap$[ebp], eax

; 1055 : 
; 1056 : 	if (hHeap == NULL) return FALSE;

	cmp	DWORD PTR _hHeap$[ebp], 0
	jne	SHORT $LN31@FormatIrpG
	xor	eax, eax
	jmp	$LN32@FormatIrpG
$LN31@FormatIrpG:

; 1057 : 
; 1058 : 	BufSize = FMTIRP_INITIAL_BUF_SIZE;

	mov	DWORD PTR _BufSize$[ebp], 1024		; 00000400H

; 1059 : 	pFIrp = (PCHAR) AllocFromHeap(hHeap, BufSize);

	mov	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	call	?AllocFromHeap@@YAPAXPAXK@Z		; AllocFromHeap
	add	esp, 8
	mov	DWORD PTR _pFIrp$[ebp], eax

; 1060 : 
; 1061 : 	if (pFIrp == NULL) return FALSE;

	cmp	DWORD PTR _pFIrp$[ebp], 0
	jne	SHORT $LN30@FormatIrpG
	xor	eax, eax
	jmp	$LN32@FormatIrpG
$LN30@FormatIrpG:

; 1062 : 	
; 1063 : 	bRet = FALSE;

	mov	DWORD PTR _bRet$[ebp], 0

; 1064 : 	SIZE_T cbOffset = 0;

	mov	DWORD PTR _cbOffset$[ebp], 0

; 1065 : 
; 1066 : 	StringCbPrintfW(
; 1067 : 		wszItemBuf,
; 1068 : 		sizeof wszItemBuf,
; 1069 : 		L"MdlAddress =                                    %#p",
; 1070 : 		Irp.MdlAddress);

	mov	ecx, DWORD PTR _Irp$[ebp+4]
	push	ecx
	push	OFFSET $SG70880
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1071 : 	SIZE_T cbItemLen;
; 1072 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1073 : 
; 1074 : 	// Count the null terminator into the length
; 1075 : 	//
; 1076 : 	cbItemLen += sizeof (WCHAR);

	mov	edx, DWORD PTR _cbItemLen$[ebp]
	add	edx, 2
	mov	DWORD PTR _cbItemLen$[ebp], edx

; 1077 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1078 : 		&BufSize, hHeap)) 

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	lea	ecx, DWORD PTR _BufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pFIrp$[ebp]
	push	edx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN29@FormatIrpG
	jmp	$CLEANUP$70886

; 1079 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN29@FormatIrpG:

; 1080 : 
; 1081 : 	StringCbPrintfW(
; 1082 : 		wszItemBuf,
; 1083 : 		sizeof wszItemBuf,
; 1084 : 		L"Flags =                                         %#x",
; 1085 : 		Irp.Flags);

	mov	eax, DWORD PTR _Irp$[ebp+8]
	push	eax
	push	OFFSET $SG70888
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1086 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1087 : 	cbItemLen += sizeof (WCHAR);

	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cbItemLen$[ebp], ecx

; 1088 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1089 : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIrp$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN27@FormatIrpG
	jmp	$CLEANUP$70886

; 1090 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN27@FormatIrpG:

; 1091 : 
; 1092 : 	StringCbPrintfW(
; 1093 : 		wszItemBuf,
; 1094 : 		sizeof wszItemBuf,
; 1095 : 		L"AssociatedIrp.MasterIrp =                       %#p",
; 1096 : 		Irp.AssociatedIrp.MasterIrp);

	mov	edx, DWORD PTR _Irp$[ebp+12]
	push	edx
	push	OFFSET $SG70894
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1097 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1098 : 	cbItemLen += sizeof (WCHAR);

	mov	eax, DWORD PTR _cbItemLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _cbItemLen$[ebp], eax

; 1099 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1100 : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN25@FormatIrpG
	jmp	$CLEANUP$70886

; 1101 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN25@FormatIrpG:

; 1102 : 
; 1103 : 	StringCbPrintfW(
; 1104 : 		wszItemBuf,
; 1105 : 		sizeof wszItemBuf,
; 1106 : 		L"AssociatedIrp.SystemBuffer =                    %#p",
; 1107 : 		Irp.AssociatedIrp.SystemBuffer);

	mov	ecx, DWORD PTR _Irp$[ebp+12]
	push	ecx
	push	OFFSET $SG70900
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1108 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1109 : 	cbItemLen += sizeof (WCHAR);

	mov	edx, DWORD PTR _cbItemLen$[ebp]
	add	edx, 2
	mov	DWORD PTR _cbItemLen$[ebp], edx

; 1110 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1111 : 		&BufSize, hHeap)) 

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	lea	ecx, DWORD PTR _BufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pFIrp$[ebp]
	push	edx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN23@FormatIrpG
	jmp	$CLEANUP$70886

; 1112 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN23@FormatIrpG:

; 1113 : 
; 1114 : 	StringCbPrintfW(
; 1115 : 		wszItemBuf,
; 1116 : 		sizeof wszItemBuf,
; 1117 : 		L"IoStatus.Status =                               %#x",
; 1118 : 		Irp.IoStatus.Status);

	mov	eax, DWORD PTR _Irp$[ebp+24]
	push	eax
	push	OFFSET $SG70906
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1119 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1120 : 	cbItemLen += sizeof (WCHAR);

	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cbItemLen$[ebp], ecx

; 1121 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1122 : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIrp$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN21@FormatIrpG
	jmp	$CLEANUP$70886

; 1123 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN21@FormatIrpG:

; 1124 : 
; 1125 : 	StringCbPrintfW(
; 1126 : 		wszItemBuf,
; 1127 : 		sizeof wszItemBuf,
; 1128 : 		L"IoStatus.Information =                          %#x",
; 1129 : 		Irp.IoStatus.Information);

	mov	edx, DWORD PTR _Irp$[ebp+28]
	push	edx
	push	OFFSET $SG70912
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1130 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1131 : 	cbItemLen += sizeof (WCHAR);

	mov	eax, DWORD PTR _cbItemLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _cbItemLen$[ebp], eax

; 1132 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1133 : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN19@FormatIrpG
	jmp	$CLEANUP$70886

; 1134 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN19@FormatIrpG:

; 1135 : 
; 1136 : 	StringCbPrintfW(
; 1137 : 		wszItemBuf,
; 1138 : 		sizeof wszItemBuf,
; 1139 : 		L"RequestorMode =                                 %d",
; 1140 : 		Irp.RequestorMode);

	movsx	ecx, BYTE PTR _Irp$[ebp+32]
	push	ecx
	push	OFFSET $SG70918
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1141 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1142 : 	cbItemLen += sizeof (WCHAR);

	mov	edx, DWORD PTR _cbItemLen$[ebp]
	add	edx, 2
	mov	DWORD PTR _cbItemLen$[ebp], edx

; 1143 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1144 : 		&BufSize, hHeap)) 

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	lea	ecx, DWORD PTR _BufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pFIrp$[ebp]
	push	edx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN17@FormatIrpG
	jmp	$CLEANUP$70886

; 1145 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN17@FormatIrpG:

; 1146 : 
; 1147 : 	StringCbPrintfW(
; 1148 : 		wszItemBuf,
; 1149 : 		sizeof wszItemBuf,
; 1150 : 		L"PendingReturned =                               %d",
; 1151 : 		Irp.PendingReturned);

	movzx	eax, BYTE PTR _Irp$[ebp+33]
	push	eax
	push	OFFSET $SG70924
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1152 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1153 : 	cbItemLen += sizeof (WCHAR);

	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cbItemLen$[ebp], ecx

; 1154 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1155 : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIrp$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN15@FormatIrpG
	jmp	$CLEANUP$70886

; 1156 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN15@FormatIrpG:

; 1157 : 
; 1158 : 	StringCbPrintfW(
; 1159 : 		wszItemBuf,
; 1160 : 		sizeof wszItemBuf,
; 1161 : 		L"Cancel =                                        %d",
; 1162 : 		Irp.Cancel);

	movzx	edx, BYTE PTR _Irp$[ebp+36]
	push	edx
	push	OFFSET $SG70930
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1163 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1164 : 	cbItemLen += sizeof (WCHAR);

	mov	eax, DWORD PTR _cbItemLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _cbItemLen$[ebp], eax

; 1165 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1166 : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN13@FormatIrpG
	jmp	$CLEANUP$70886

; 1167 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN13@FormatIrpG:

; 1168 : 
; 1169 : 	StringCbPrintfW(
; 1170 : 		wszItemBuf,
; 1171 : 		sizeof wszItemBuf,
; 1172 : 		L"CancelIrql =                                    %d",
; 1173 : 		Irp.CancelIrql);

	movzx	ecx, BYTE PTR _Irp$[ebp+37]
	push	ecx
	push	OFFSET $SG70936
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1174 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1175 : 	cbItemLen += sizeof (WCHAR);

	mov	edx, DWORD PTR _cbItemLen$[ebp]
	add	edx, 2
	mov	DWORD PTR _cbItemLen$[ebp], edx

; 1176 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1177 : 		&BufSize, hHeap)) 

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	lea	ecx, DWORD PTR _BufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pFIrp$[ebp]
	push	edx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN11@FormatIrpG
	jmp	$CLEANUP$70886

; 1178 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN11@FormatIrpG:

; 1179 : 
; 1180 : 	StringCbPrintfW(
; 1181 : 		wszItemBuf,
; 1182 : 		sizeof wszItemBuf,
; 1183 : 		L"CancelRoutine =                                 %#p",
; 1184 : 		Irp.CancelRoutine);

	mov	eax, DWORD PTR _Irp$[ebp+56]
	push	eax
	push	OFFSET $SG70942
	push	202					; 000000caH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1185 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1186 : 	cbItemLen += sizeof (WCHAR);

	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cbItemLen$[ebp], ecx

; 1187 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1188 : 		&BufSize, hHeap)) 

	mov	edx, DWORD PTR _hHeap$[ebp]
	push	edx
	lea	eax, DWORD PTR _BufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _cbOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pFIrp$[ebp]
	push	ecx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN9@FormatIrpG
	jmp	$CLEANUP$70886

; 1189 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN9@FormatIrpG:

; 1190 : 
; 1191 : 	StringCbPrintfW(
; 1192 : 		wszItemBuf,
; 1193 : 		sizeof wszItemBuf,
; 1194 : 		L"UserBuffer =                                    %#p",
; 1195 : 		Irp.UserBuffer);

	mov	edx, DWORD PTR _Irp$[ebp+60]
	push	edx
	push	OFFSET $SG70948
	push	202					; 000000caH
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1196 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	ecx, DWORD PTR _cbItemLen$[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1197 : 	cbItemLen += sizeof (WCHAR);

	mov	eax, DWORD PTR _cbItemLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _cbItemLen$[ebp], eax

; 1198 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1199 : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN7@FormatIrpG
	jmp	$CLEANUP$70886

; 1200 : 		goto CLEANUP;

	jmp	$CLEANUP$70886
$LN7@FormatIrpG:

; 1201 : 
; 1202 : 	StringCbPrintfW(
; 1203 : 		wszItemBuf,
; 1204 : 		sizeof wszItemBuf,
; 1205 : 		L"Tail.Overlay.Thread =                           %#p",
; 1206 : 		Irp.Tail.Overlay.Thread);

	mov	ecx, DWORD PTR _Irp$[ebp+80]
	push	ecx
	push	OFFSET $SG70954
	push	202					; 000000caH
	lea	edx, DWORD PTR _wszItemBuf$[ebp]
	push	edx
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 1207 : 	StringCbLength(wszItemBuf, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 1208 : 	cbItemLen += sizeof (WCHAR);

	mov	edx, DWORD PTR _cbItemLen$[ebp]
	add	edx, 2
	mov	DWORD PTR _cbItemLen$[ebp], edx

; 1209 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1210 : 		&BufSize, hHeap)) 

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	lea	ecx, DWORD PTR _BufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _wszItemBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pFIrp$[ebp]
	push	edx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN5@FormatIrpG
	jmp	SHORT $CLEANUP$70886

; 1211 : 		goto CLEANUP;

	jmp	SHORT $CLEANUP$70886
$LN5@FormatIrpG:

; 1212 : 
; 1213 : 	// Add the extra null terminator which marks the text end
; 1214 : 	//
; 1215 : 	wszItemBuf[0] = L'\0';

	xor	eax, eax
	mov	WORD PTR _wszItemBuf$[ebp], ax

; 1216 : 	cbItemLen = sizeof (WCHAR);

	mov	DWORD PTR _cbItemLen$[ebp], 2

; 1217 : 	if (!CopyToBuffer(&pFIrp, &cbOffset, (PCHAR) wszItemBuf, cbItemLen, 
; 1218 : 		&BufSize, hHeap)) 

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	lea	edx, DWORD PTR _BufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wszItemBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cbOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN3@FormatIrpG
	jmp	SHORT $CLEANUP$70886

; 1219 : 		goto CLEANUP;

	jmp	SHORT $CLEANUP$70886
$LN3@FormatIrpG:

; 1220 : 
; 1221 : 	// If we made it here, success.
; 1222 : 	//
; 1223 : 	*ppFIrp = (PWCHAR) pFIrp;

	mov	ecx, DWORD PTR _ppFIrp$[ebx]
	mov	edx, DWORD PTR _pFIrp$[ebp]
	mov	DWORD PTR [ecx], edx

; 1224 : 	bRet = TRUE;

	mov	DWORD PTR _bRet$[ebp], 1
$CLEANUP$70886:

; 1225 : 
; 1226 : CLEANUP:
; 1227 : 	if (!bRet) {

	cmp	DWORD PTR _bRet$[ebp], 0
	jne	SHORT $LN1@FormatIrpG

; 1228 : 		HeapFree(hHeap, 0, pFIrp);

	mov	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	call	DWORD PTR __imp__HeapFree@12
$LN1@FormatIrpG:

; 1229 : 	}
; 1230 : 	return bRet;

	mov	eax, DWORD PTR _bRet$[ebp]
$LN32@FormatIrpG:

; 1231 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?FormatIrpGeneric@@YAHPADPAPA_W@Z ENDP			; FormatIrpGeneric
_TEXT	ENDS
PUBLIC	?IoStackSizeWin7X64@@YAKXZ			; IoStackSizeWin7X64
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\win7x64.cpp
_TEXT	SEGMENT
?IoStackSizeWin7X64@@YAKXZ PROC				; IoStackSizeWin7X64

; 47   : {

	push	ebp
	mov	ebp, esp

; 48   : 	return sizeof (IO_STACK_LOCATION);

	mov	eax, 56					; 00000038H

; 49   : }

	pop	ebp
	ret	0
?IoStackSizeWin7X64@@YAKXZ ENDP				; IoStackSizeWin7X64
_TEXT	ENDS
PUBLIC	?IrpSizeWin7X64@@YAKXZ				; IrpSizeWin7X64
; Function compile flags: /Odtp
_TEXT	SEGMENT
?IrpSizeWin7X64@@YAKXZ PROC				; IrpSizeWin7X64

; 55   : {

	push	ebp
	mov	ebp, esp

; 56   : 	return sizeof (IRP);

	mov	eax, 112				; 00000070H

; 57   : }

	pop	ebp
	ret	0
?IrpSizeWin7X64@@YAKXZ ENDP				; IrpSizeWin7X64
_TEXT	ENDS
END
