; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?pwszMajorFunctionV@@3PAPEA_WA			; pwszMajorFunctionV
PUBLIC	?pwszPnpMinorFunctionV@@3PAPEA_WA		; pwszPnpMinorFunctionV
PUBLIC	?pwszPowerMinorFunctionV@@3PAPEA_WA		; pwszPowerMinorFunctionV
_DATA	SEGMENT
?pwszMajorFunctionV@@3PAPEA_WA DQ FLAT:$SG68238		; pwszMajorFunctionV
	DQ	FLAT:$SG68239
	DQ	FLAT:$SG68240
	DQ	FLAT:$SG68241
	DQ	FLAT:$SG68242
	DQ	FLAT:$SG68243
	DQ	FLAT:$SG68244
	DQ	FLAT:$SG68245
	DQ	FLAT:$SG68246
	DQ	FLAT:$SG68247
	DQ	FLAT:$SG68248
	DQ	FLAT:$SG68249
	DQ	FLAT:$SG68250
	DQ	FLAT:$SG68251
	DQ	FLAT:$SG68252
	DQ	FLAT:$SG68253
	DQ	FLAT:$SG68254
	DQ	FLAT:$SG68255
	DQ	FLAT:$SG68256
	DQ	FLAT:$SG68257
	DQ	FLAT:$SG68258
	DQ	FLAT:$SG68259
	DQ	FLAT:$SG68260
	DQ	FLAT:$SG68261
	DQ	FLAT:$SG68262
	DQ	FLAT:$SG68263
	DQ	FLAT:$SG68264
	DQ	FLAT:$SG68265
?pwszPnpMinorFunctionV@@3PAPEA_WA DQ FLAT:$SG68267	; pwszPnpMinorFunctionV
	DQ	FLAT:$SG68268
	DQ	FLAT:$SG68269
	DQ	FLAT:$SG68270
	DQ	FLAT:$SG68271
	DQ	FLAT:$SG68272
	DQ	FLAT:$SG68273
	DQ	FLAT:$SG68274
	DQ	FLAT:$SG68275
	DQ	FLAT:$SG68276
	DQ	FLAT:$SG68277
	DQ	FLAT:$SG68278
	DQ	FLAT:$SG68279
	DQ	FLAT:$SG68280
	DQ	FLAT:$SG68281
	DQ	FLAT:$SG68282
	DQ	FLAT:$SG68283
	DQ	FLAT:$SG68284
	DQ	FLAT:$SG68285
	DQ	FLAT:$SG68286
	DQ	FLAT:$SG68287
	DQ	FLAT:$SG68288
	DQ	FLAT:$SG68289
	DQ	FLAT:$SG68290
?pwszPowerMinorFunctionV@@3PAPEA_WA DQ FLAT:$SG68292	; pwszPowerMinorFunctionV
	DQ	FLAT:$SG68293
	DQ	FLAT:$SG68294
	DQ	FLAT:$SG68295
_DATA	ENDS
CONST	SEGMENT
$SG67830 DB	00H
	ORG $+3
$SG67844 DB	00H, 00H
	ORG $+2
$SG68238 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, 00H, 00H
	ORG $+4
$SG68239 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '_', 00H, 'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, 'D', 00H
	DB	'_', 00H, 'P', 00H, 'I', 00H, 'P', 00H, 'E', 00H, 00H, 00H
	ORG $+6
$SG68240 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'L', 00H, 'O', 00H, 'S', 00H, 'E', 00H, 00H
	DB	00H
	ORG $+6
$SG68241 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 00H, 00H
$SG68242 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'W', 00H, 'R', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 00H
	DB	00H
	ORG $+6
$SG68243 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H
	DB	'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+6
$SG68244 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'I', 00H, 'N'
	DB	00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H
	DB	'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+2
$SG68245 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'E', 00H, 'A', 00H, 00H, 00H
$SG68246 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'E', 00H, 'A'
	DB	00H, 00H, 00H
	ORG $+4
$SG68247 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'F', 00H, 'L', 00H, 'U', 00H, 'S', 00H, 'H', 00H, '_'
	DB	00H, 'B', 00H, 'U', 00H, 'F', 00H, 'F', 00H, 'E', 00H, 'R', 00H
	DB	'S', 00H, 00H, 00H
	ORG $+6
$SG68248 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'V', 00H, 'O', 00H, 'L', 00H, 'U', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
$SG68249 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'V', 00H, 'O'
	DB	00H, 'L', 00H, 'U', 00H, 'M', 00H, 'E', 00H, '_', 00H, 'I', 00H
	DB	'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+4
$SG68250 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'D', 00H, 'I', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, 'O', 00H, 'R', 00H, 'Y', 00H, '_', 00H, 'C', 00H, 'O', 00H
	DB	'N', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L', 00H, 00H, 00H
	ORG $+6
$SG68251 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H, '_', 00H, 'S'
	DB	00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '_', 00H
	DB	'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L'
	DB	00H, 00H, 00H
	ORG $+2
$SG68252 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H
	DB	'O', 00H, 'L', 00H, 00H, 00H
	ORG $+4
$SG68253 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'N'
	DB	00H, 'A', 00H, 'L', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG68254 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'H', 00H, 'U', 00H, 'T', 00H, 'D', 00H, 'O'
	DB	00H, 'W', 00H, 'N', 00H, 00H, 00H
$SG68255 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '_', 00H, 'C'
	DB	00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L', 00H
	DB	00H, 00H
$SG68256 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'L', 00H, 'E', 00H, 'A', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, 00H, 00H
	ORG $+2
$SG68257 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '_', 00H, 'M', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'S', 00H
	DB	'L', 00H, 'O', 00H, 'T', 00H, 00H, 00H
	ORG $+2
$SG68258 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'S', 00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H
	DB	'T', 00H, 'Y', 00H, 00H, 00H
	ORG $+4
$SG68259 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H, 'T', 00H, 'Y', 00H
	DB	00H, 00H
$SG68260 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H, 'R', 00H, 00H
	DB	00H
	ORG $+6
$SG68261 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H
	DB	'O', 00H, 'L', 00H, 00H, 00H
	ORG $+4
$SG68262 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H
	DB	'E', 00H, 00H, 00H
	ORG $+6
$SG68263 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'Q', 00H, 'U', 00H, 'O', 00H, 'T', 00H, 'A', 00H, 00H, 00H
	ORG $+2
$SG68264 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'Q', 00H, 'U'
	DB	00H, 'O', 00H, 'T', 00H, 'A', 00H, 00H, 00H
	ORG $+6
$SG68265 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'P', 00H, 'N', 00H, 'P', 00H, 00H, 00H
	ORG $+2
$SG68267 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'R', 00H, 'T', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	00H, 00H
$SG68268 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, 00H, 00H
	ORG $+2
$SG68269 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E'
	DB	00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H
	DB	'E', 00H, 00H, 00H
	ORG $+6
$SG68270 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'C', 00H, 'A', 00H, 'N', 00H, 'C', 00H, 'E', 00H, 'L'
	DB	00H, '_', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'E', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C'
	DB	00H, 'E', 00H, 00H, 00H
$SG68271 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, '_', 00H, 'D'
	DB	00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG68272 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, '_', 00H, 'D', 00H
	DB	'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, 00H, 00H
	ORG $+6
$SG68273 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'C', 00H, 'A', 00H, 'N', 00H, 'C', 00H, 'E', 00H, 'L'
	DB	00H, '_', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, '_', 00H
	DB	'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, 00H
	DB	00H
	ORG $+4
$SG68274 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'L', 00H, 'A', 00H, 'T', 00H, 'I'
	DB	00H, 'O', 00H, 'N', 00H, 'S', 00H, 00H, 00H
	ORG $+4
$SG68275 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'F', 00H
	DB	'A', 00H, 'C', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG68276 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'C', 00H, 'A', 00H, 'P', 00H, 'A', 00H, 'B', 00H, 'I', 00H
	DB	'L', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'E', 00H, 'S', 00H, 00H
	DB	00H
	ORG $+4
$SG68277 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'R', 00H, 'E', 00H, 'S', 00H, 'O', 00H, 'U', 00H, 'R', 00H
	DB	'C', 00H, 'E', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG68278 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'R', 00H, 'E', 00H, 'S', 00H, 'O', 00H, 'U', 00H, 'R', 00H
	DB	'C', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'Q', 00H, 'U'
	DB	00H, 'I', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'T', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG68279 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	'_', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 00H, 00H
	ORG $+6
$SG68280 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'T', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'R', 00H, 'E', 00H, 'S', 00H, 'O', 00H, 'U', 00H
	DB	'R', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'Q'
	DB	00H, 'U', 00H, 'I', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'E', 00H
	DB	'N', 00H, 'T', 00H, 'S', 00H, 00H, 00H
$SG68281 DB	'u', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, 00H, 00H
$SG68282 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, '_', 00H, 'C'
	DB	00H, 'O', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'G', 00H, 00H, 00H
	ORG $+2
$SG68283 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'W', 00H, 'R', 00H, 'I', 00H, 'T', 00H, 'E', 00H, '_'
	DB	00H, 'C', 00H, 'O', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'G', 00H
	DB	00H, 00H
$SG68284 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'E', 00H, 'J', 00H, 'E', 00H, 'C', 00H, 'T', 00H, 00H
	DB	00H
	ORG $+6
$SG68285 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'L', 00H, 'O'
	DB	00H, 'C', 00H, 'K', 00H, 00H, 00H
$SG68286 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG68287 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'P', 00H, 'N', 00H, 'P', 00H, '_', 00H, 'D', 00H, 'E', 00H
	DB	'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, 00H, 00H
	ORG $+4
$SG68288 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'B', 00H, 'U', 00H, 'S', 00H, '_', 00H, 'I', 00H, 'N', 00H
	DB	'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, 'I'
	DB	00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+14
$SG68289 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'U', 00H, 'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H
	DB	'_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'I'
	DB	00H, 'C', 00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H
	DB	00H, 00H
	ORG $+6
$SG68290 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'U', 00H, 'R', 00H, 'P', 00H, 'R', 00H, 'I'
	DB	00H, 'S', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'M', 00H
	DB	'O', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 00H, 00H
$SG68292 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'W', 00H, 'A', 00H, 'I', 00H, 'T', 00H, '_', 00H, 'W'
	DB	00H, 'A', 00H, 'K', 00H, 'E', 00H, 00H, 00H
	ORG $+6
$SG68293 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H, 'R', 00H, '_'
	DB	00H, 'S', 00H, 'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 00H, 00H
	ORG $+4
$SG68294 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'P', 00H, 'O'
	DB	00H, 'W', 00H, 'E', 00H, 'R', 00H, 00H, 00H
	ORG $+6
$SG68295 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H, 'R', 00H, 00H, 00H
	ORG $+2
$SG68336 DB	'%', 00H, '#', 00H, 'x', 00H, 00H, 00H
$SG68437 DB	'%', 00H, '#', 00H, 'x', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?AllocFromHeap@@YAPEAXPEAX_K@Z			; AllocFromHeap
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_HeapAlloc:PROC
pdata	SEGMENT
$pdata$?AllocFromHeap@@YAPEAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$?AllocFromHeap@@YAPEAXPEAX_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AllocFromHeap@@YAPEAXPEAX_K@Z DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\krnlutils.cpp
xdata	ENDS
_TEXT	SEGMENT
pMem$ = 32
hHeap$ = 64
cbBufSize$ = 72
?AllocFromHeap@@YAPEAXPEAX_K@Z PROC			; AllocFromHeap

; 95   : {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 96   : 	PVOID pMem = HeapAlloc(hHeap, 0, cbBufSize);

	mov	r8, QWORD PTR cbBufSize$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR hHeap$[rsp]
	call	QWORD PTR __imp_HeapAlloc
	mov	QWORD PTR pMem$[rsp], rax

; 97   : 	if (pMem == NULL) {

	cmp	QWORD PTR pMem$[rsp], 0
	jne	SHORT $LN1@AllocFromH

; 98   : 
; 99   : 		// HeapAlloc does not call SetLastError() on its own.
; 100  : 		//
; 101  : 		SetLastError(ERROR_NOT_ENOUGH_MEMORY);

	mov	ecx, 8
	call	QWORD PTR __imp_SetLastError
$LN1@AllocFromH:

; 102  : 	}
; 103  : 	return pMem;

	mov	rax, QWORD PTR pMem$[rsp]

; 104  : }

	add	rsp, 56					; 00000038H
	ret	0
?AllocFromHeap@@YAPEAXPEAX_K@Z ENDP			; AllocFromHeap
_TEXT	ENDS
PUBLIC	?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z	; CopyToBuffer
PUBLIC	?StringCbLengthW@@YAJPEB_W_KPEA_K@Z		; StringCbLengthW
PUBLIC	?AppendString@@YAHPEA_WPEAPEADPEA_K2PEAX@Z	; AppendString
pdata	SEGMENT
$pdata$?AppendString@@YAHPEA_WPEAPEADPEA_K2PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?AppendString@@YAHPEA_WPEAPEADPEA_K2PEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AppendString@@YAHPEA_WPEAPEADPEA_K2PEAX@Z DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
cbItemLen$ = 48
wszItem$ = 80
ppFmtBuf$ = 88
pcbOffset$ = 96
pcbBufSize$ = 104
hHeap$ = 112
?AppendString@@YAHPEA_WPEAPEADPEA_K2PEAX@Z PROC		; AppendString

; 114  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 115  : 	SIZE_T	cbItemLen;
; 116  : 
; 117  : 	StringCbLength(wszItem, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	r8, QWORD PTR cbItemLen$[rsp]
	mov	edx, 2147483647				; 7fffffffH
	mov	rcx, QWORD PTR wszItem$[rsp]
	call	?StringCbLengthW@@YAJPEB_W_KPEA_K@Z	; StringCbLengthW

; 118  : 	cbItemLen += sizeof (WCHAR);

	mov	rax, QWORD PTR cbItemLen$[rsp]
	add	rax, 2
	mov	QWORD PTR cbItemLen$[rsp], rax

; 119  : 	return CopyToBuffer(ppFmtBuf, pcbOffset, (PCHAR) wszItem, 
; 120  : 		cbItemLen, pcbBufSize, hHeap);

	mov	rax, QWORD PTR hHeap$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR pcbBufSize$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR cbItemLen$[rsp]
	mov	r8, QWORD PTR wszItem$[rsp]
	mov	rdx, QWORD PTR pcbOffset$[rsp]
	mov	rcx, QWORD PTR ppFmtBuf$[rsp]
	call	?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z ; CopyToBuffer

; 121  : }

	add	rsp, 72					; 00000048H
	ret	0
?AppendString@@YAHPEA_WPEAPEADPEA_K2PEAX@Z ENDP		; AppendString
_TEXT	ENDS
;	COMDAT pdata
; File c:\apps\pw7hp\devpgm\mssdk\include\strsafe.h
pdata	SEGMENT
$pdata$?StringCbLengthW@@YAJPEB_W_KPEA_K@Z DD imagerel $LN9
	DD	imagerel $LN9+155
	DD	imagerel $unwind$?StringCbLengthW@@YAJPEB_W_KPEA_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StringCbLengthW@@YAJPEB_W_KPEA_K@Z DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ?StringCbLengthW@@YAJPEB_W_KPEA_K@Z
_TEXT	SEGMENT
cchLength$ = 32
cchMax$ = 40
hr$ = 48
psz$ = 80
cbMax$ = 88
pcbLength$ = 96
?StringCbLengthW@@YAJPEB_W_KPEA_K@Z PROC		; StringCbLengthW, COMDAT

; 8329 : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 8330 :     HRESULT hr;
; 8331 :     size_t cchMax = cbMax / sizeof(wchar_t);

	xor	edx, edx
	mov	rax, QWORD PTR cbMax$[rsp]
	mov	ecx, 2
	div	rcx
	mov	QWORD PTR cchMax$[rsp], rax

; 8332 :     size_t cchLength = 0;

	mov	QWORD PTR cchLength$[rsp], 0

; 8333 : 
; 8334 :     if ((psz == NULL) || (cchMax > STRSAFE_MAX_CCH))

	cmp	QWORD PTR psz$[rsp], 0
	je	SHORT $LN5@StringCbLe
	cmp	QWORD PTR cchMax$[rsp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@StringCbLe
$LN5@StringCbLe:

; 8335 :     {
; 8336 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR hr$[rsp], -2147024809		; ffffffff80070057H

; 8337 :     }
; 8338 :     else

	jmp	SHORT $LN4@StringCbLe
$LN6@StringCbLe:

; 8339 :     {
; 8340 :         hr = StringLengthWorkerW(psz, cchMax, &cchLength);

	lea	r8, QWORD PTR cchLength$[rsp]
	mov	rdx, QWORD PTR cchMax$[rsp]
	mov	rcx, QWORD PTR psz$[rsp]
	call	?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z	; StringLengthWorkerW
	mov	DWORD PTR hr$[rsp], eax
$LN4@StringCbLe:

; 8341 :     }
; 8342 : 
; 8343 :     if (pcbLength)

	cmp	QWORD PTR pcbLength$[rsp], 0
	je	SHORT $LN3@StringCbLe

; 8344 :     {
; 8345 :         if (SUCCEEDED(hr))

	cmp	DWORD PTR hr$[rsp], 0
	jl	SHORT $LN2@StringCbLe

; 8346 :         {
; 8347 :             // safe to multiply cchLength * sizeof(wchar_t) since cchLength < STRSAFE_MAX_CCH and sizeof(wchar_t) is 2
; 8348 :             *pcbLength = cchLength * sizeof(wchar_t);

	mov	rcx, QWORD PTR cchLength$[rsp]
	shl	rcx, 1
	mov	rax, QWORD PTR pcbLength$[rsp]
	mov	QWORD PTR [rax], rcx

; 8349 :         }
; 8350 :         else

	jmp	SHORT $LN1@StringCbLe
$LN2@StringCbLe:

; 8351 :         {
; 8352 :             *pcbLength = 0;

	mov	rax, QWORD PTR pcbLength$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@StringCbLe:
$LN3@StringCbLe:

; 8353 :         }
; 8354 :     }
; 8355 : 
; 8356 :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 8357 : }

	add	rsp, 72					; 00000048H
	ret	0
?StringCbLengthW@@YAJPEB_W_KPEA_K@Z ENDP		; StringCbLengthW
_TEXT	ENDS
pdata	SEGMENT
$pdata$?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z DD imagerel ?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z
	DD	imagerel ?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z+160
	DD	imagerel $unwind$?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
cchOriginalMax$ = 0
hr$ = 8
psz$ = 32
cchMax$ = 40
pcchLength$ = 48
?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z PROC		; StringLengthWorkerW

; 8585 : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 8586 :     HRESULT hr = S_OK;

	mov	DWORD PTR hr$[rsp], 0

; 8587 :     size_t cchOriginalMax = cchMax;

	mov	rax, QWORD PTR cchMax$[rsp]
	mov	QWORD PTR cchOriginalMax$[rsp], rax
$LN6@StringLeng:

; 8588 : 
; 8589 :     while (cchMax && (*psz != L'\0'))

	cmp	QWORD PTR cchMax$[rsp], 0
	je	SHORT $LN5@StringLeng
	mov	rax, QWORD PTR psz$[rsp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN5@StringLeng

; 8590 :     {
; 8591 :         psz++;

	mov	rax, QWORD PTR psz$[rsp]
	add	rax, 2
	mov	QWORD PTR psz$[rsp], rax

; 8592 :         cchMax--;

	mov	rax, QWORD PTR cchMax$[rsp]
	sub	rax, 1
	mov	QWORD PTR cchMax$[rsp], rax

; 8593 :     }

	jmp	SHORT $LN6@StringLeng
$LN5@StringLeng:

; 8594 : 
; 8595 :     if (cchMax == 0)

	cmp	QWORD PTR cchMax$[rsp], 0
	jne	SHORT $LN4@StringLeng

; 8596 :     {
; 8597 :         // the string is longer than cchMax
; 8598 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR hr$[rsp], -2147024809		; ffffffff80070057H
$LN4@StringLeng:

; 8599 :     }
; 8600 : 
; 8601 :     if (pcchLength)

	cmp	QWORD PTR pcchLength$[rsp], 0
	je	SHORT $LN3@StringLeng

; 8602 :     {
; 8603 :         if (SUCCEEDED(hr))

	cmp	DWORD PTR hr$[rsp], 0
	jl	SHORT $LN2@StringLeng

; 8604 :         {
; 8605 :             *pcchLength = cchOriginalMax - cchMax;

	mov	rax, QWORD PTR cchMax$[rsp]
	mov	rcx, QWORD PTR cchOriginalMax$[rsp]
	sub	rcx, rax
	mov	rax, QWORD PTR pcchLength$[rsp]
	mov	QWORD PTR [rax], rcx

; 8606 :         }
; 8607 :         else

	jmp	SHORT $LN1@StringLeng
$LN2@StringLeng:

; 8608 :         {
; 8609 :             *pcchLength = 0;

	mov	rax, QWORD PTR pcchLength$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@StringLeng:
$LN3@StringLeng:

; 8610 :         }
; 8611 :     }
; 8612 : 
; 8613 :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 8614 : }

	add	rsp, 24
	ret	0
?StringLengthWorkerW@@YAJPEB_W_KPEA_K@Z ENDP		; StringLengthWorkerW
_TEXT	ENDS
PUBLIC	?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z		; ExtendBuffer
EXTRN	memcpy:PROC
pdata	SEGMENT
$pdata$?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z DD imagerel $LN5
	DD	imagerel $LN5+152
	DD	imagerel $unwind$?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z DD 011801H
	DD	06218H
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\krnlutils.cpp
xdata	ENDS
_TEXT	SEGMENT
cbNeeded$ = 32
ppBuffer$ = 64
pcbOffset$ = 72
pSource$ = 80
cbLen$ = 88
pcbBufSize$ = 96
hHeap$ = 104
?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z PROC	; CopyToBuffer

; 132  : {

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 133  : 	SIZE_T cbNeeded = *pcbOffset + cbLen;

	mov	rax, QWORD PTR pcbOffset$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR cbLen$[rsp]
	mov	QWORD PTR cbNeeded$[rsp], rax

; 134  : 	if (cbNeeded > *pcbBufSize) {

	mov	rax, QWORD PTR pcbBufSize$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR cbNeeded$[rsp], rax
	jbe	SHORT $LN2@CopyToBuff

; 135  : 		if (!ExtendBuffer(ppBuffer, pcbBufSize, cbNeeded, hHeap)) {

	mov	r9, QWORD PTR hHeap$[rsp]
	mov	r8, QWORD PTR cbNeeded$[rsp]
	mov	rdx, QWORD PTR pcbBufSize$[rsp]
	mov	rcx, QWORD PTR ppBuffer$[rsp]
	call	?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z	; ExtendBuffer
	test	eax, eax
	jne	SHORT $LN1@CopyToBuff

; 136  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@CopyToBuff
$LN1@CopyToBuff:
$LN2@CopyToBuff:

; 137  : 		}
; 138  : 	}
; 139  : 	memcpy(*ppBuffer + *pcbOffset, pSource, cbLen);

	mov	rcx, QWORD PTR ppBuffer$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR pcbOffset$[rsp]
	add	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR cbLen$[rsp]
	mov	rdx, QWORD PTR pSource$[rsp]
	call	memcpy

; 140  : 	*pcbOffset += cbLen;

	mov	rcx, QWORD PTR pcbOffset$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, QWORD PTR cbLen$[rsp]
	mov	rax, QWORD PTR pcbOffset$[rsp]
	mov	QWORD PTR [rax], rcx

; 141  : 	return TRUE;

	mov	eax, 1
$LN3@CopyToBuff:

; 142  : }

	add	rsp, 56					; 00000038H
	ret	0
?CopyToBuffer@@YAHPEAPEADPEA_KPEAD_K1PEAX@Z ENDP	; CopyToBuffer
_TEXT	ENDS
PUBLIC	?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ		; StringCbPrintfW
PUBLIC	?StringCbCopyW@@YAJPEA_W_KPEB_W@Z		; StringCbCopyW
PUBLIC	?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z	; DecodeEnum
pdata	SEGMENT
$pdata$?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z DD 011601H
	DD	06216H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
Index$ = 32
Value$ = 64
Base$ = 72
pwszDecodeV$ = 80
VectLen$ = 88
pwszOutBuf$ = 96
cbBufSize$ = 104
?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z PROC		; DecodeEnum

; 153  : {

$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 154  : 	INT Index = Value - Base;

	mov	ecx, DWORD PTR Base$[rsp]
	mov	eax, DWORD PTR Value$[rsp]
	sub	eax, ecx
	mov	DWORD PTR Index$[rsp], eax

; 155  : 	if ((Index >= 0) && ((UINT) Index < VectLen)) {

	cmp	DWORD PTR Index$[rsp], 0
	jl	SHORT $LN2@DecodeEnum
	mov	eax, DWORD PTR VectLen$[rsp]
	cmp	DWORD PTR Index$[rsp], eax
	jae	SHORT $LN2@DecodeEnum

; 156  : 		StringCbCopyW(pwszOutBuf, cbBufSize, pwszDecodeV[Index]);

	movsxd	rax, DWORD PTR Index$[rsp]
	mov	r8, QWORD PTR pwszDecodeV$[rsp]
	mov	r8, QWORD PTR [r8+rax*8]
	mov	rdx, QWORD PTR cbBufSize$[rsp]
	mov	rcx, QWORD PTR pwszOutBuf$[rsp]
	call	?StringCbCopyW@@YAJPEA_W_KPEB_W@Z	; StringCbCopyW

; 157  : 	} else {

	jmp	SHORT $LN1@DecodeEnum
$LN2@DecodeEnum:

; 158  : 		StringCbPrintfW(pwszOutBuf, cbBufSize, L"%#x", Value);

	mov	r9d, DWORD PTR Value$[rsp]
	lea	r8, OFFSET FLAT:$SG68336
	mov	rdx, QWORD PTR cbBufSize$[rsp]
	mov	rcx, QWORD PTR pwszOutBuf$[rsp]
	call	?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ	; StringCbPrintfW
$LN1@DecodeEnum:

; 159  : 	}
; 160  : 
; 161  : 	return pwszOutBuf;

	mov	rax, QWORD PTR pwszOutBuf$[rsp]

; 162  : }

	add	rsp, 56					; 00000038H
	ret	0
?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z ENDP		; DecodeEnum
_TEXT	ENDS
;	COMDAT pdata
; File c:\apps\pw7hp\devpgm\mssdk\include\strsafe.h
pdata	SEGMENT
$pdata$?StringCbCopyW@@YAJPEA_W_KPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$?StringCbCopyW@@YAJPEA_W_KPEB_W@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StringCbCopyW@@YAJPEA_W_KPEB_W@Z DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ?StringCbCopyW@@YAJPEA_W_KPEB_W@Z
_TEXT	SEGMENT
hr$ = 48
cchDest$ = 56
pszDest$ = 80
cbDest$ = 88
pszSrc$ = 96
?StringCbCopyW@@YAJPEA_W_KPEB_W@Z PROC			; StringCbCopyW, COMDAT

; 605  : {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 606  :     HRESULT hr;
; 607  :     size_t cchDest = cbDest / sizeof(wchar_t);

	xor	edx, edx
	mov	rax, QWORD PTR cbDest$[rsp]
	mov	ecx, 2
	div	rcx
	mov	QWORD PTR cchDest$[rsp], rax

; 608  : 
; 609  :     hr = StringValidateDestW(pszDest, cchDest, STRSAFE_MAX_CCH);

	mov	r8d, 2147483647				; 7fffffffH
	mov	rdx, QWORD PTR cchDest$[rsp]
	mov	rcx, QWORD PTR pszDest$[rsp]
	call	?StringValidateDestW@@YAJPEB_W_K_K@Z	; StringValidateDestW
	mov	DWORD PTR hr$[rsp], eax

; 610  : 
; 611  :     if (SUCCEEDED(hr))

	cmp	DWORD PTR hr$[rsp], 0
	jl	SHORT $LN1@StringCbCo

; 612  :     {
; 613  :         hr = StringCopyWorkerW(pszDest,
; 614  :                                cchDest,
; 615  :                                NULL,
; 616  :                                pszSrc,
; 617  :                                STRSAFE_MAX_LENGTH);

	mov	QWORD PTR [rsp+32], 2147483646		; 7ffffffeH
	mov	r9, QWORD PTR pszSrc$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR cchDest$[rsp]
	mov	rcx, QWORD PTR pszDest$[rsp]
	call	?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z ; StringCopyWorkerW
	mov	DWORD PTR hr$[rsp], eax
$LN1@StringCbCo:

; 618  :     }
; 619  : 
; 620  :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 621  : }

	add	rsp, 72					; 00000048H
	ret	0
?StringCbCopyW@@YAJPEA_W_KPEB_W@Z ENDP			; StringCbCopyW
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ
_TEXT	SEGMENT
hr$ = 48
cchDest$ = 56
argList$67117 = 64
pszDest$ = 96
cbDest$ = 104
pszFormat$ = 112
?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ PROC		; StringCbPrintfW, COMDAT

; 4797 : {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 88					; 00000058H

; 4798 :     HRESULT hr;
; 4799 :     size_t cchDest = cbDest / sizeof(wchar_t);

	xor	edx, edx
	mov	rax, QWORD PTR cbDest$[rsp]
	mov	ecx, 2
	div	rcx
	mov	QWORD PTR cchDest$[rsp], rax

; 4800 : 
; 4801 :     hr = StringValidateDestW(pszDest, cchDest, STRSAFE_MAX_CCH);

	mov	r8d, 2147483647				; 7fffffffH
	mov	rdx, QWORD PTR cchDest$[rsp]
	mov	rcx, QWORD PTR pszDest$[rsp]
	call	?StringValidateDestW@@YAJPEB_W_K_K@Z	; StringValidateDestW
	mov	DWORD PTR hr$[rsp], eax

; 4802 :     
; 4803 :     if (SUCCEEDED(hr))

	cmp	DWORD PTR hr$[rsp], 0
	jl	SHORT $LN1@StringCbPr

; 4804 :     {
; 4805 :         va_list argList;
; 4806 : 
; 4807 :         va_start(argList, pszFormat);

	lea	rax, QWORD PTR pszFormat$[rsp+8]
	mov	QWORD PTR argList$67117[rsp], rax

; 4808 : 
; 4809 :         hr = StringVPrintfWorkerW(pszDest,
; 4810 :                                   cchDest,
; 4811 :                                   NULL,
; 4812 :                                   pszFormat,
; 4813 :                                   argList);

	mov	rax, QWORD PTR argList$67117[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR pszFormat$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR cchDest$[rsp]
	mov	rcx, QWORD PTR pszDest$[rsp]
	call	?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z ; StringVPrintfWorkerW
	mov	DWORD PTR hr$[rsp], eax

; 4814 : 
; 4815 :         va_end(argList);

	mov	QWORD PTR argList$67117[rsp], 0
$LN1@StringCbPr:

; 4816 :     }
; 4817 : 
; 4818 :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 4819 : }

	add	rsp, 88					; 00000058H
	ret	0
?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ ENDP		; StringCbPrintfW
_TEXT	ENDS
pdata	SEGMENT
$pdata$?StringValidateDestW@@YAJPEB_W_K_K@Z DD imagerel ?StringValidateDestW@@YAJPEB_W_K_K@Z
	DD	imagerel ?StringValidateDestW@@YAJPEB_W_K_K@Z+61
	DD	imagerel $unwind$?StringValidateDestW@@YAJPEB_W_K_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?StringValidateDestW@@YAJPEB_W_K_K@Z DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
hr$ = 0
pszDest$ = 32
cchDest$ = 40
cchMax$ = 48
?StringValidateDestW@@YAJPEB_W_K_K@Z PROC		; StringValidateDestW

; 8769 : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 8770 :     HRESULT hr = S_OK;

	mov	DWORD PTR hr$[rsp], 0

; 8771 : 
; 8772 :     if ((cchDest == 0) || (cchDest > cchMax))

	cmp	QWORD PTR cchDest$[rsp], 0
	je	SHORT $LN1@StringVali
	mov	rax, QWORD PTR cchMax$[rsp]
	cmp	QWORD PTR cchDest$[rsp], rax
	jbe	SHORT $LN2@StringVali
$LN1@StringVali:

; 8773 :     {
; 8774 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR hr$[rsp], -2147024809		; ffffffff80070057H
$LN2@StringVali:

; 8775 :     }
; 8776 : 
; 8777 :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 8778 : }

	add	rsp, 24
	ret	0
?StringValidateDestW@@YAJPEB_W_K_K@Z ENDP		; StringValidateDestW
_TEXT	ENDS
pdata	SEGMENT
$pdata$?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z DD imagerel ?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z
	DD	imagerel ?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z+235
	DD	imagerel $unwind$?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z DD 011801H
	DD	02218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
cchNewDestLength$ = 0
hr$ = 8
pszDest$ = 32
cchDest$ = 40
pcchNewDestLength$ = 48
pszSrc$ = 56
cchToCopy$ = 64
?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z PROC	; StringCopyWorkerW

; 8988 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 8989 :     HRESULT hr = S_OK;

	mov	DWORD PTR hr$[rsp], 0

; 8990 :     size_t cchNewDestLength = 0;

	mov	QWORD PTR cchNewDestLength$[rsp], 0
$LN4@StringCopy:

; 8991 :     
; 8992 :     // ASSERT(cchDest != 0);
; 8993 : 
; 8994 :     while (cchDest && cchToCopy && (*pszSrc != L'\0'))

	cmp	QWORD PTR cchDest$[rsp], 0
	je	SHORT $LN3@StringCopy
	cmp	QWORD PTR cchToCopy$[rsp], 0
	je	SHORT $LN3@StringCopy
	mov	rax, QWORD PTR pszSrc$[rsp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN3@StringCopy

; 8995 :     {
; 8996 :         *pszDest++ = *pszSrc++;

	mov	rcx, QWORD PTR pszDest$[rsp]
	mov	rax, QWORD PTR pszSrc$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax
	mov	rax, QWORD PTR pszDest$[rsp]
	add	rax, 2
	mov	QWORD PTR pszDest$[rsp], rax
	mov	rax, QWORD PTR pszSrc$[rsp]
	add	rax, 2
	mov	QWORD PTR pszSrc$[rsp], rax

; 8997 :         cchDest--;

	mov	rax, QWORD PTR cchDest$[rsp]
	sub	rax, 1
	mov	QWORD PTR cchDest$[rsp], rax

; 8998 :         cchToCopy--;

	mov	rax, QWORD PTR cchToCopy$[rsp]
	sub	rax, 1
	mov	QWORD PTR cchToCopy$[rsp], rax

; 8999 : 
; 9000 :         cchNewDestLength++;

	mov	rax, QWORD PTR cchNewDestLength$[rsp]
	add	rax, 1
	mov	QWORD PTR cchNewDestLength$[rsp], rax

; 9001 :     }

	jmp	SHORT $LN4@StringCopy
$LN3@StringCopy:

; 9002 : 
; 9003 :     if (cchDest == 0)

	cmp	QWORD PTR cchDest$[rsp], 0
	jne	SHORT $LN2@StringCopy

; 9004 :     {
; 9005 :         // we are going to truncate pszDest
; 9006 :         pszDest--;

	mov	rax, QWORD PTR pszDest$[rsp]
	sub	rax, 2
	mov	QWORD PTR pszDest$[rsp], rax

; 9007 :         cchNewDestLength--;

	mov	rax, QWORD PTR cchNewDestLength$[rsp]
	sub	rax, 1
	mov	QWORD PTR cchNewDestLength$[rsp], rax

; 9008 : 
; 9009 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR hr$[rsp], -2147024774		; ffffffff8007007aH
$LN2@StringCopy:

; 9010 :     }
; 9011 : 
; 9012 :     *pszDest = L'\0';

	xor	ecx, ecx
	mov	rax, QWORD PTR pszDest$[rsp]
	mov	WORD PTR [rax], cx

; 9013 : 
; 9014 :     if (pcchNewDestLength)

	cmp	QWORD PTR pcchNewDestLength$[rsp], 0
	je	SHORT $LN1@StringCopy

; 9015 :     {
; 9016 :         *pcchNewDestLength = cchNewDestLength;

	mov	rcx, QWORD PTR pcchNewDestLength$[rsp]
	mov	rax, QWORD PTR cchNewDestLength$[rsp]
	mov	QWORD PTR [rcx], rax
$LN1@StringCopy:

; 9017 :     }
; 9018 : 
; 9019 :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 9020 : }

	add	rsp, 24
	ret	0
?StringCopyWorkerW@@YAJPEA_W_KPEA_KPEB_W1@Z ENDP	; StringCopyWorkerW
_TEXT	ENDS
EXTRN	_vsnwprintf:PROC
pdata	SEGMENT
$pdata$?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z DD imagerel ?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z
	DD	imagerel ?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z+245
	DD	imagerel $unwind$?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
cchNewDestLength$ = 32
cchMax$ = 40
iRet$ = 48
hr$ = 52
pszDest$ = 80
cchDest$ = 88
pcchNewDestLength$ = 96
pszFormat$ = 104
argList$ = 112
?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z PROC	; StringVPrintfWorkerW

; 9145 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 9146 :     HRESULT hr = S_OK;

	mov	DWORD PTR hr$[rsp], 0

; 9147 :     int iRet;
; 9148 :     size_t cchMax;
; 9149 :     size_t cchNewDestLength = 0;

	mov	QWORD PTR cchNewDestLength$[rsp], 0

; 9150 : 
; 9151 :     // leave the last space for the null terminator
; 9152 :     cchMax = cchDest - 1;

	mov	rax, QWORD PTR cchDest$[rsp]
	sub	rax, 1
	mov	QWORD PTR cchMax$[rsp], rax

; 9153 : 
; 9154 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9155 :     iRet = _vsnwprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9156 : #else
; 9157 :     #pragma warning(push)
; 9158 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9159 :     iRet = _vsnwprintf(pszDest, cchMax, pszFormat, argList);

	mov	r9, QWORD PTR argList$[rsp]
	mov	r8, QWORD PTR pszFormat$[rsp]
	mov	rdx, QWORD PTR cchMax$[rsp]
	mov	rcx, QWORD PTR pszDest$[rsp]
	call	_vsnwprintf
	mov	DWORD PTR iRet$[rsp], eax

; 9160 :     #pragma warning(pop)
; 9161 : #endif
; 9162 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9163 : 
; 9164 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

	cmp	DWORD PTR iRet$[rsp], 0
	jl	SHORT $LN5@StringVPri
	movsxd	rax, DWORD PTR iRet$[rsp]
	cmp	rax, QWORD PTR cchMax$[rsp]
	jbe	SHORT $LN6@StringVPri
$LN5@StringVPri:

; 9165 :     {
; 9166 :         // need to null terminate the string
; 9167 :         pszDest += cchMax;

	mov	rcx, QWORD PTR pszDest$[rsp]
	mov	rax, QWORD PTR cchMax$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pszDest$[rsp], rax

; 9168 :         *pszDest = L'\0';

	xor	ecx, ecx
	mov	rax, QWORD PTR pszDest$[rsp]
	mov	WORD PTR [rax], cx

; 9169 : 
; 9170 :         cchNewDestLength = cchMax;

	mov	rax, QWORD PTR cchMax$[rsp]
	mov	QWORD PTR cchNewDestLength$[rsp], rax

; 9171 : 
; 9172 :         // we have truncated pszDest
; 9173 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR hr$[rsp], -2147024774		; ffffffff8007007aH
	jmp	SHORT $LN4@StringVPri
$LN6@StringVPri:

; 9174 :     }
; 9175 :     else if (((size_t)iRet) == cchMax)

	movsxd	rax, DWORD PTR iRet$[rsp]
	cmp	rax, QWORD PTR cchMax$[rsp]
	jne	SHORT $LN3@StringVPri

; 9176 :     {
; 9177 :         // need to null terminate the string
; 9178 :         pszDest += cchMax;

	mov	rcx, QWORD PTR pszDest$[rsp]
	mov	rax, QWORD PTR cchMax$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pszDest$[rsp], rax

; 9179 :         *pszDest = L'\0';

	xor	ecx, ecx
	mov	rax, QWORD PTR pszDest$[rsp]
	mov	WORD PTR [rax], cx

; 9180 : 
; 9181 :         cchNewDestLength = cchMax;

	mov	rax, QWORD PTR cchMax$[rsp]
	mov	QWORD PTR cchNewDestLength$[rsp], rax

; 9182 :     }
; 9183 :     else

	jmp	SHORT $LN2@StringVPri
$LN3@StringVPri:

; 9184 :     {
; 9185 :         cchNewDestLength = (size_t)iRet;

	movsxd	rax, DWORD PTR iRet$[rsp]
	mov	QWORD PTR cchNewDestLength$[rsp], rax
$LN2@StringVPri:
$LN4@StringVPri:

; 9186 :     }
; 9187 : 
; 9188 :     if (pcchNewDestLength)

	cmp	QWORD PTR pcchNewDestLength$[rsp], 0
	je	SHORT $LN1@StringVPri

; 9189 :     {
; 9190 :         *pcchNewDestLength = cchNewDestLength;

	mov	rcx, QWORD PTR pcchNewDestLength$[rsp]
	mov	rax, QWORD PTR cchNewDestLength$[rsp]
	mov	QWORD PTR [rcx], rax
$LN1@StringVPri:

; 9191 :     }
; 9192 : 
; 9193 :     return hr;

	mov	eax, DWORD PTR hr$[rsp]

; 9194 : }

	add	rsp, 72					; 00000048H
	ret	0
?StringVPrintfWorkerW@@YAJPEA_W_KPEA_KPEB_WPEAD@Z ENDP	; StringVPrintfWorkerW
_TEXT	ENDS
EXTRN	__imp_HeapFree:PROC
pdata	SEGMENT
$pdata$?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+139
	DD	imagerel $unwind$?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z DD 011801H
	DD	06218H
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\krnlutils.cpp
xdata	ENDS
_TEXT	SEGMENT
pNew$ = 32
ppBuffer$ = 64
pcbBufSize$ = 72
cbNeeded$ = 80
hHeap$ = 88
?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z PROC		; ExtendBuffer

; 171  : {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 172  : 	PCHAR pNew = (PCHAR) AllocFromHeap(hHeap, cbNeeded);

	mov	rdx, QWORD PTR cbNeeded$[rsp]
	mov	rcx, QWORD PTR hHeap$[rsp]
	call	?AllocFromHeap@@YAPEAXPEAX_K@Z		; AllocFromHeap
	mov	QWORD PTR pNew$[rsp], rax

; 173  : 	if (pNew == NULL) return FALSE;

	cmp	QWORD PTR pNew$[rsp], 0
	jne	SHORT $LN1@ExtendBuff
	xor	eax, eax
	jmp	SHORT $LN2@ExtendBuff
$LN1@ExtendBuff:

; 174  : 	memcpy(pNew, *ppBuffer, *pcbBufSize);

	mov	r8, QWORD PTR pcbBufSize$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	rdx, QWORD PTR ppBuffer$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR pNew$[rsp]
	call	memcpy

; 175  : 	HeapFree(hHeap, 0, *ppBuffer);

	mov	r8, QWORD PTR ppBuffer$[rsp]
	mov	r8, QWORD PTR [r8]
	xor	edx, edx
	mov	rcx, QWORD PTR hHeap$[rsp]
	call	QWORD PTR __imp_HeapFree

; 176  : 	*ppBuffer = pNew;

	mov	r11, QWORD PTR ppBuffer$[rsp]
	mov	rax, QWORD PTR pNew$[rsp]
	mov	QWORD PTR [r11], rax

; 177  : 	*pcbBufSize = cbNeeded;

	mov	rcx, QWORD PTR pcbBufSize$[rsp]
	mov	rax, QWORD PTR cbNeeded$[rsp]
	mov	QWORD PTR [rcx], rax

; 178  : 
; 179  : 	return TRUE;

	mov	eax, 1
$LN2@ExtendBuff:

; 180  : }

	add	rsp, 56					; 00000038H
	ret	0
?ExtendBuffer@@YAHPEAPEADPEA_K_KPEAX@Z ENDP		; ExtendBuffer
_TEXT	ENDS
PUBLIC	FormatIoStack
EXTRN	?FormatIoStackWin7X64@@YAHPEADPEAPEA_W@Z:PROC	; FormatIoStackWin7X64
EXTRN	?FormatIoStackWlhX64@@YAHPEADPEAPEA_W@Z:PROC	; FormatIoStackWlhX64
EXTRN	?FormatIoStackWin7X86@@YAHPEADPEAPEA_W@Z:PROC	; FormatIoStackWin7X86
EXTRN	?FormatIoStackWlhX86@@YAHPEADPEAPEA_W@Z:PROC	; FormatIoStackWlhX86
EXTRN	?FormatIoStackWxpX86@@YAHPEADPEAPEA_W@Z:PROC	; FormatIoStackWxpX86
pdata	SEGMENT
$pdata$FormatIoStack DD imagerel $LN13
	DD	imagerel $LN13+213
	DD	imagerel $unwind$FormatIoStack
pdata	ENDS
xdata	SEGMENT
$unwind$FormatIoStack DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
pStackData$ = 48
ppFStack$ = 56
Arch$ = 64
OsVer$ = 72
FormatIoStack PROC

; 189  : {

$LN13:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 190  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN10@FormatIoSt
	cmp	DWORD PTR OsVer$[rsp], 0
	jne	SHORT $LN10@FormatIoSt

; 191  : 		return FormatIoStackWxpX86(pStackData, ppFStack);

	mov	rdx, QWORD PTR ppFStack$[rsp]
	mov	rcx, QWORD PTR pStackData$[rsp]
	call	?FormatIoStackWxpX86@@YAHPEADPEAPEA_W@Z	; FormatIoStackWxpX86
	jmp	$LN11@FormatIoSt
	jmp	$LN9@FormatIoSt
$LN10@FormatIoSt:

; 192  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN8@FormatIoSt
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN8@FormatIoSt

; 193  : 		return FormatIoStackWlhX86(pStackData, ppFStack);

	mov	rdx, QWORD PTR ppFStack$[rsp]
	mov	rcx, QWORD PTR pStackData$[rsp]
	call	?FormatIoStackWlhX86@@YAHPEADPEAPEA_W@Z	; FormatIoStackWlhX86
	jmp	SHORT $LN11@FormatIoSt
	jmp	SHORT $LN7@FormatIoSt
$LN8@FormatIoSt:

; 194  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN6@FormatIoSt
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN6@FormatIoSt

; 195  : 		return FormatIoStackWin7X86(pStackData, ppFStack);

	mov	rdx, QWORD PTR ppFStack$[rsp]
	mov	rcx, QWORD PTR pStackData$[rsp]
	call	?FormatIoStackWin7X86@@YAHPEADPEAPEA_W@Z ; FormatIoStackWin7X86
	jmp	SHORT $LN11@FormatIoSt
	jmp	SHORT $LN5@FormatIoSt
$LN6@FormatIoSt:

; 196  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN4@FormatIoSt
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN4@FormatIoSt

; 197  : 		return FormatIoStackWlhX64(pStackData, ppFStack);

	mov	rdx, QWORD PTR ppFStack$[rsp]
	mov	rcx, QWORD PTR pStackData$[rsp]
	call	?FormatIoStackWlhX64@@YAHPEADPEAPEA_W@Z	; FormatIoStackWlhX64
	jmp	SHORT $LN11@FormatIoSt
	jmp	SHORT $LN3@FormatIoSt
$LN4@FormatIoSt:

; 198  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN2@FormatIoSt
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN2@FormatIoSt

; 199  : 		return FormatIoStackWin7X64(pStackData, ppFStack);

	mov	rdx, QWORD PTR ppFStack$[rsp]
	mov	rcx, QWORD PTR pStackData$[rsp]
	call	?FormatIoStackWin7X64@@YAHPEADPEAPEA_W@Z ; FormatIoStackWin7X64
	jmp	SHORT $LN11@FormatIoSt

; 200  : 	} else {

	jmp	SHORT $LN1@FormatIoSt
$LN2@FormatIoSt:

; 201  : 		SetLastError(ERROR_INVALID_PARAMETER);

	mov	ecx, 87					; 00000057H
	call	QWORD PTR __imp_SetLastError

; 202  : 		return FALSE;

	xor	eax, eax
$LN1@FormatIoSt:
$LN3@FormatIoSt:
$LN5@FormatIoSt:
$LN7@FormatIoSt:
$LN9@FormatIoSt:
$LN11@FormatIoSt:

; 203  : 	}
; 204  : }

	add	rsp, 40					; 00000028H
	ret	0
FormatIoStack ENDP
_TEXT	ENDS
PUBLIC	FormatIrp
EXTRN	?FormatIrpWin7X64@@YAHPEADPEAPEA_W@Z:PROC	; FormatIrpWin7X64
EXTRN	?FormatIrpWlhX64@@YAHPEADPEAPEA_W@Z:PROC	; FormatIrpWlhX64
EXTRN	?FormatIrpWin7X86@@YAHPEADPEAPEA_W@Z:PROC	; FormatIrpWin7X86
EXTRN	?FormatIrpWlhX86@@YAHPEADPEAPEA_W@Z:PROC	; FormatIrpWlhX86
EXTRN	?FormatIrpWxpX86@@YAHPEADPEAPEA_W@Z:PROC	; FormatIrpWxpX86
pdata	SEGMENT
$pdata$FormatIrp DD imagerel $LN13
	DD	imagerel $LN13+213
	DD	imagerel $unwind$FormatIrp
pdata	ENDS
xdata	SEGMENT
$unwind$FormatIrp DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
pIrpData$ = 48
ppFIrp$ = 56
Arch$ = 64
OsVer$ = 72
FormatIrp PROC

; 214  : {

$LN13:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 215  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN10@FormatIrp
	cmp	DWORD PTR OsVer$[rsp], 0
	jne	SHORT $LN10@FormatIrp

; 216  : 		return FormatIrpWxpX86(pIrpData, ppFIrp);

	mov	rdx, QWORD PTR ppFIrp$[rsp]
	mov	rcx, QWORD PTR pIrpData$[rsp]
	call	?FormatIrpWxpX86@@YAHPEADPEAPEA_W@Z	; FormatIrpWxpX86
	jmp	$LN11@FormatIrp
	jmp	$LN9@FormatIrp
$LN10@FormatIrp:

; 217  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN8@FormatIrp
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN8@FormatIrp

; 218  : 		return FormatIrpWlhX86(pIrpData, ppFIrp);

	mov	rdx, QWORD PTR ppFIrp$[rsp]
	mov	rcx, QWORD PTR pIrpData$[rsp]
	call	?FormatIrpWlhX86@@YAHPEADPEAPEA_W@Z	; FormatIrpWlhX86
	jmp	SHORT $LN11@FormatIrp
	jmp	SHORT $LN7@FormatIrp
$LN8@FormatIrp:

; 219  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN6@FormatIrp
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN6@FormatIrp

; 220  : 		return FormatIrpWin7X86(pIrpData, ppFIrp);

	mov	rdx, QWORD PTR ppFIrp$[rsp]
	mov	rcx, QWORD PTR pIrpData$[rsp]
	call	?FormatIrpWin7X86@@YAHPEADPEAPEA_W@Z	; FormatIrpWin7X86
	jmp	SHORT $LN11@FormatIrp
	jmp	SHORT $LN5@FormatIrp
$LN6@FormatIrp:

; 221  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN4@FormatIrp
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN4@FormatIrp

; 222  : 		return FormatIrpWlhX64(pIrpData, ppFIrp);

	mov	rdx, QWORD PTR ppFIrp$[rsp]
	mov	rcx, QWORD PTR pIrpData$[rsp]
	call	?FormatIrpWlhX64@@YAHPEADPEAPEA_W@Z	; FormatIrpWlhX64
	jmp	SHORT $LN11@FormatIrp
	jmp	SHORT $LN3@FormatIrp
$LN4@FormatIrp:

; 223  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN2@FormatIrp
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN2@FormatIrp

; 224  : 		return FormatIrpWin7X64(pIrpData, ppFIrp);

	mov	rdx, QWORD PTR ppFIrp$[rsp]
	mov	rcx, QWORD PTR pIrpData$[rsp]
	call	?FormatIrpWin7X64@@YAHPEADPEAPEA_W@Z	; FormatIrpWin7X64
	jmp	SHORT $LN11@FormatIrp

; 225  : 	} else {

	jmp	SHORT $LN1@FormatIrp
$LN2@FormatIrp:

; 226  : 		SetLastError(ERROR_INVALID_PARAMETER);

	mov	ecx, 87					; 00000057H
	call	QWORD PTR __imp_SetLastError

; 227  : 		return FALSE;

	xor	eax, eax
$LN1@FormatIrp:
$LN3@FormatIrp:
$LN5@FormatIrp:
$LN7@FormatIrp:
$LN9@FormatIrp:
$LN11@FormatIrp:

; 228  : 	}
; 229  : 
; 230  : }

	add	rsp, 40					; 00000028H
	ret	0
FormatIrp ENDP
_TEXT	ENDS
PUBLIC	FreeFmtIrp
EXTRN	__imp_GetProcessHeap:PROC
pdata	SEGMENT
$pdata$FreeFmtIrp DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$FreeFmtIrp
pdata	ENDS
xdata	SEGMENT
$unwind$FreeFmtIrp DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
hHeap$ = 32
pFIrp$ = 64
FreeFmtIrp PROC

; 236  : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 237  : 	HANDLE hHeap = GetProcessHeap();

	call	QWORD PTR __imp_GetProcessHeap
	mov	QWORD PTR hHeap$[rsp], rax

; 238  : 	if (hHeap != NULL) {

	cmp	QWORD PTR hHeap$[rsp], 0
	je	SHORT $LN1@FreeFmtIrp

; 239  : 		HeapFree(hHeap, 0, pFIrp);

	mov	r8, QWORD PTR pFIrp$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR hHeap$[rsp]
	call	QWORD PTR __imp_HeapFree
$LN1@FreeFmtIrp:

; 240  : 	}
; 241  : }

	add	rsp, 56					; 00000038H
	ret	0
FreeFmtIrp ENDP
_TEXT	ENDS
PUBLIC	FreeFmtStack
pdata	SEGMENT
$pdata$FreeFmtStack DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$FreeFmtStack
pdata	ENDS
xdata	SEGMENT
$unwind$FreeFmtStack DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
hHeap$ = 32
pFStack$ = 64
FreeFmtStack PROC

; 247  : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 248  : 	HANDLE hHeap = GetProcessHeap();

	call	QWORD PTR __imp_GetProcessHeap
	mov	QWORD PTR hHeap$[rsp], rax

; 249  : 	if (hHeap != NULL) {

	cmp	QWORD PTR hHeap$[rsp], 0
	je	SHORT $LN1@FreeFmtSta

; 250  : 		HeapFree(hHeap, 0, pFStack);

	mov	r8, QWORD PTR pFStack$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR hHeap$[rsp]
	call	QWORD PTR __imp_HeapFree
$LN1@FreeFmtSta:

; 251  : 	}
; 252  : }

	add	rsp, 56					; 00000038H
	ret	0
FreeFmtStack ENDP
_TEXT	ENDS
PUBLIC	IoStackSize
EXTRN	?IoStackSizeWin7X64@@YA_KXZ:PROC		; IoStackSizeWin7X64
EXTRN	?IoStackSizeWlhX64@@YA_KXZ:PROC			; IoStackSizeWlhX64
EXTRN	?IoStackSizeWin7X86@@YA_KXZ:PROC		; IoStackSizeWin7X86
EXTRN	?IoStackSizeWlhX86@@YA_KXZ:PROC			; IoStackSizeWlhX86
EXTRN	?IoStackSizeWxpX86@@YA_KXZ:PROC			; IoStackSizeWxpX86
pdata	SEGMENT
$pdata$IoStackSize DD imagerel $LN13
	DD	imagerel $LN13+134
	DD	imagerel $unwind$IoStackSize
pdata	ENDS
xdata	SEGMENT
$unwind$IoStackSize DD 010c01H
	DD	0420cH
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
Arch$ = 48
OsVer$ = 56
IoStackSize PROC

; 259  : {

$LN13:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 260  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN10@IoStackSiz
	cmp	DWORD PTR OsVer$[rsp], 0
	jne	SHORT $LN10@IoStackSiz

; 261  : 		return IoStackSizeWxpX86();

	call	?IoStackSizeWxpX86@@YA_KXZ		; IoStackSizeWxpX86
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN9@IoStackSiz
$LN10@IoStackSiz:

; 262  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN8@IoStackSiz
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN8@IoStackSiz

; 263  : 		return IoStackSizeWlhX86();

	call	?IoStackSizeWlhX86@@YA_KXZ		; IoStackSizeWlhX86
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN7@IoStackSiz
$LN8@IoStackSiz:

; 264  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN6@IoStackSiz
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN6@IoStackSiz

; 265  : 		return IoStackSizeWin7X86();

	call	?IoStackSizeWin7X86@@YA_KXZ		; IoStackSizeWin7X86
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN5@IoStackSiz
$LN6@IoStackSiz:

; 266  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN4@IoStackSiz
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN4@IoStackSiz

; 267  : 		return IoStackSizeWlhX64();

	call	?IoStackSizeWlhX64@@YA_KXZ		; IoStackSizeWlhX64
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN3@IoStackSiz
$LN4@IoStackSiz:

; 268  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN2@IoStackSiz
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN2@IoStackSiz

; 269  : 		return IoStackSizeWin7X64();

	call	?IoStackSizeWin7X64@@YA_KXZ		; IoStackSizeWin7X64
	jmp	SHORT $LN11@IoStackSiz

; 270  : 	} else {

	jmp	SHORT $LN1@IoStackSiz
$LN2@IoStackSiz:

; 271  : 		return 0;

	xor	eax, eax
$LN1@IoStackSiz:
$LN3@IoStackSiz:
$LN5@IoStackSiz:
$LN7@IoStackSiz:
$LN9@IoStackSiz:
$LN11@IoStackSiz:

; 272  : 	}
; 273  : }

	add	rsp, 40					; 00000028H
	ret	0
IoStackSize ENDP
_TEXT	ENDS
PUBLIC	IrpSize
EXTRN	?IrpSizeWin7X64@@YA_KXZ:PROC			; IrpSizeWin7X64
EXTRN	?IrpSizeWlhX64@@YA_KXZ:PROC			; IrpSizeWlhX64
EXTRN	?IrpSizeWin7X86@@YA_KXZ:PROC			; IrpSizeWin7X86
EXTRN	?IrpSizeWlhX86@@YA_KXZ:PROC			; IrpSizeWlhX86
EXTRN	?IrpSizeWxpX86@@YA_KXZ:PROC			; IrpSizeWxpX86
pdata	SEGMENT
$pdata$IrpSize DD imagerel $LN13
	DD	imagerel $LN13+134
	DD	imagerel $unwind$IrpSize
pdata	ENDS
xdata	SEGMENT
$unwind$IrpSize DD 010c01H
	DD	0420cH
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
Arch$ = 48
OsVer$ = 56
IrpSize	PROC

; 280  : {

$LN13:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 281  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN10@IrpSize
	cmp	DWORD PTR OsVer$[rsp], 0
	jne	SHORT $LN10@IrpSize

; 282  : 		return IrpSizeWxpX86();

	call	?IrpSizeWxpX86@@YA_KXZ			; IrpSizeWxpX86
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN9@IrpSize
$LN10@IrpSize:

; 283  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN8@IrpSize
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN8@IrpSize

; 284  : 		return IrpSizeWlhX86();

	call	?IrpSizeWlhX86@@YA_KXZ			; IrpSizeWlhX86
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN7@IrpSize
$LN8@IrpSize:

; 285  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 0
	jne	SHORT $LN6@IrpSize
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN6@IrpSize

; 286  : 		return IrpSizeWin7X86();

	call	?IrpSizeWin7X86@@YA_KXZ			; IrpSizeWin7X86
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN5@IrpSize
$LN6@IrpSize:

; 287  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN4@IrpSize
	cmp	DWORD PTR OsVer$[rsp], 1
	jne	SHORT $LN4@IrpSize

; 288  : 		return IrpSizeWlhX64();

	call	?IrpSizeWlhX64@@YA_KXZ			; IrpSizeWlhX64
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN3@IrpSize
$LN4@IrpSize:

; 289  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR Arch$[rsp], 1
	jne	SHORT $LN2@IrpSize
	cmp	DWORD PTR OsVer$[rsp], 2
	jne	SHORT $LN2@IrpSize

; 290  : 		return IrpSizeWin7X64();

	call	?IrpSizeWin7X64@@YA_KXZ			; IrpSizeWin7X64
	jmp	SHORT $LN11@IrpSize

; 291  : 	} else {

	jmp	SHORT $LN1@IrpSize
$LN2@IrpSize:

; 292  : 		return 0;

	xor	eax, eax
$LN1@IrpSize:
$LN3@IrpSize:
$LN5@IrpSize:
$LN7@IrpSize:
$LN9@IrpSize:
$LN11@IrpSize:

; 293  : 	}
; 294  : }

	add	rsp, 40					; 00000028H
	ret	0
IrpSize	ENDP
_TEXT	ENDS
PUBLIC	MajorFunctionDes
pdata	SEGMENT
$pdata$MajorFunctionDes DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$MajorFunctionDes
pdata	ENDS
xdata	SEGMENT
$unwind$MajorFunctionDes DD 011201H
	DD	06212H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
MajorFunction$ = 64
pwszDecodeBuf$ = 72
cbBufSize$ = 80
MajorFunctionDes PROC

; 302  : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 303  : 	return DecodeEnum(
; 304  : 		MajorFunction,
; 305  : 		0,
; 306  : 		pwszMajorFunctionV,
; 307  : 		sizeof pwszMajorFunctionV / sizeof(PWSTR),
; 308  : 		pwszDecodeBuf,
; 309  : 		cbBufSize);

	movzx	ecx, BYTE PTR MajorFunction$[rsp]
	mov	rax, QWORD PTR cbBufSize$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR pwszDecodeBuf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 28
	lea	r8, OFFSET FLAT:?pwszMajorFunctionV@@3PAPEA_WA ; pwszMajorFunctionV
	xor	edx, edx
	call	?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z ; DecodeEnum

; 310  : }

	add	rsp, 56					; 00000038H
	ret	0
MajorFunctionDes ENDP
_TEXT	ENDS
PUBLIC	MinorFunctionDes
pdata	SEGMENT
$pdata$MinorFunctionDes DD imagerel $LN8
	DD	imagerel $LN8+182
	DD	imagerel $unwind$MinorFunctionDes
pdata	ENDS
xdata	SEGMENT
$unwind$MinorFunctionDes DD 011601H
	DD	08216H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
tv65 = 48
MajorFunction$ = 80
MinorFunction$ = 88
pwszDecodeBuf$ = 96
cbBufSize$ = 104
MinorFunctionDes PROC

; 319  : {

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 72					; 00000048H

; 320  : 	switch (MajorFunction) {

	mov	al, BYTE PTR MajorFunction$[rsp]
	mov	BYTE PTR tv65[rsp], al
	cmp	BYTE PTR tv65[rsp], 22
	je	SHORT $LN2@MinorFunct
	cmp	BYTE PTR tv65[rsp], 27
	je	SHORT $LN3@MinorFunct
	jmp	SHORT $LN1@MinorFunct
$LN3@MinorFunct:

; 321  : 		case IRP_MJ_PNP:
; 322  : 			return DecodeEnum(
; 323  : 				MinorFunction,
; 324  : 				0,
; 325  : 				pwszPnpMinorFunctionV,
; 326  : 				sizeof pwszPnpMinorFunctionV / sizeof (PWSTR),
; 327  : 				pwszDecodeBuf,
; 328  : 				cbBufSize);

	movzx	ecx, BYTE PTR MinorFunction$[rsp]
	mov	rax, QWORD PTR cbBufSize$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR pwszDecodeBuf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 24
	lea	r8, OFFSET FLAT:?pwszPnpMinorFunctionV@@3PAPEA_WA ; pwszPnpMinorFunctionV
	xor	edx, edx
	call	?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z ; DecodeEnum
	jmp	SHORT $LN6@MinorFunct

; 329  : 			break;

	jmp	SHORT $LN4@MinorFunct
$LN2@MinorFunct:

; 330  : 		case IRP_MJ_POWER:
; 331  : 			return DecodeEnum(
; 332  : 				MinorFunction,
; 333  : 				0,
; 334  : 				pwszPowerMinorFunctionV,
; 335  : 				sizeof pwszPowerMinorFunctionV / sizeof (PWSTR),
; 336  : 				pwszDecodeBuf,
; 337  : 				cbBufSize);

	movzx	ecx, BYTE PTR MinorFunction$[rsp]
	mov	rax, QWORD PTR cbBufSize$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR pwszDecodeBuf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4
	lea	r8, OFFSET FLAT:?pwszPowerMinorFunctionV@@3PAPEA_WA ; pwszPowerMinorFunctionV
	xor	edx, edx
	call	?DecodeEnum@@YAPEA_WHHQEAPEA_WIPEA_W_K@Z ; DecodeEnum
	jmp	SHORT $LN6@MinorFunct

; 338  : 			break;

	jmp	SHORT $LN4@MinorFunct
$LN1@MinorFunct:

; 339  : 		default:
; 340  : 			StringCbPrintfW(
; 341  : 				pwszDecodeBuf,
; 342  : 				cbBufSize,
; 343  : 				L"%#x",
; 344  : 				MinorFunction);

	movzx	r9d, BYTE PTR MinorFunction$[rsp]
	lea	r8, OFFSET FLAT:$SG68437
	mov	rdx, QWORD PTR cbBufSize$[rsp]
	mov	rcx, QWORD PTR pwszDecodeBuf$[rsp]
	call	?StringCbPrintfW@@YAJPEA_W_KPEB_WZZ	; StringCbPrintfW

; 345  : 			return pwszDecodeBuf;

	mov	rax, QWORD PTR pwszDecodeBuf$[rsp]
$LN4@MinorFunct:
$LN6@MinorFunct:

; 346  : 	}
; 347  : }

	add	rsp, 72					; 00000048H
	ret	0
MinorFunctionDes ENDP
_TEXT	ENDS
END
