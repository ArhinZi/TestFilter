; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	B:\Programm\WntSys\TestFilter\Release\1_1\Source\KrnlUtils\KrnlUtils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?pwszMajorFunctionV@@3PAPA_WA			; pwszMajorFunctionV
PUBLIC	?pwszPnpMinorFunctionV@@3PAPA_WA		; pwszPnpMinorFunctionV
PUBLIC	?pwszPowerMinorFunctionV@@3PAPA_WA		; pwszPowerMinorFunctionV
_DATA	SEGMENT
?pwszMajorFunctionV@@3PAPA_WA DD FLAT:$SG67565		; pwszMajorFunctionV
	DD	FLAT:$SG67566
	DD	FLAT:$SG67567
	DD	FLAT:$SG67568
	DD	FLAT:$SG67569
	DD	FLAT:$SG67570
	DD	FLAT:$SG67571
	DD	FLAT:$SG67572
	DD	FLAT:$SG67573
	DD	FLAT:$SG67574
	DD	FLAT:$SG67575
	DD	FLAT:$SG67576
	DD	FLAT:$SG67577
	DD	FLAT:$SG67578
	DD	FLAT:$SG67579
	DD	FLAT:$SG67580
	DD	FLAT:$SG67581
	DD	FLAT:$SG67582
	DD	FLAT:$SG67583
	DD	FLAT:$SG67584
	DD	FLAT:$SG67585
	DD	FLAT:$SG67586
	DD	FLAT:$SG67587
	DD	FLAT:$SG67588
	DD	FLAT:$SG67589
	DD	FLAT:$SG67590
	DD	FLAT:$SG67591
	DD	FLAT:$SG67592
?pwszPnpMinorFunctionV@@3PAPA_WA DD FLAT:$SG67594	; pwszPnpMinorFunctionV
	DD	FLAT:$SG67595
	DD	FLAT:$SG67596
	DD	FLAT:$SG67597
	DD	FLAT:$SG67598
	DD	FLAT:$SG67599
	DD	FLAT:$SG67600
	DD	FLAT:$SG67601
	DD	FLAT:$SG67602
	DD	FLAT:$SG67603
	DD	FLAT:$SG67604
	DD	FLAT:$SG67605
	DD	FLAT:$SG67606
	DD	FLAT:$SG67607
	DD	FLAT:$SG67608
	DD	FLAT:$SG67609
	DD	FLAT:$SG67610
	DD	FLAT:$SG67611
	DD	FLAT:$SG67612
	DD	FLAT:$SG67613
	DD	FLAT:$SG67614
	DD	FLAT:$SG67615
	DD	FLAT:$SG67616
	DD	FLAT:$SG67617
?pwszPowerMinorFunctionV@@3PAPA_WA DD FLAT:$SG67619	; pwszPowerMinorFunctionV
	DD	FLAT:$SG67620
	DD	FLAT:$SG67621
	DD	FLAT:$SG67622
_DATA	ENDS
CONST	SEGMENT
$SG67157 DB	00H
	ORG $+3
$SG67171 DB	00H, 00H
	ORG $+2
$SG67565 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, 00H, 00H
$SG67566 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '_', 00H, 'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, 'D', 00H
	DB	'_', 00H, 'P', 00H, 'I', 00H, 'P', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG67567 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'L', 00H, 'O', 00H, 'S', 00H, 'E', 00H, 00H
	DB	00H
	ORG $+2
$SG67568 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 00H, 00H
$SG67569 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'W', 00H, 'R', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 00H
	DB	00H
	ORG $+2
$SG67570 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H
	DB	'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+2
$SG67571 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'I', 00H, 'N'
	DB	00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H
	DB	'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+2
$SG67572 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'E', 00H, 'A', 00H, 00H, 00H
$SG67573 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'E', 00H, 'A'
	DB	00H, 00H, 00H
$SG67574 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'F', 00H, 'L', 00H, 'U', 00H, 'S', 00H, 'H', 00H, '_'
	DB	00H, 'B', 00H, 'U', 00H, 'F', 00H, 'F', 00H, 'E', 00H, 'R', 00H
	DB	'S', 00H, 00H, 00H
	ORG $+6
$SG67575 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'V', 00H, 'O', 00H, 'L', 00H, 'U', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
$SG67576 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'V', 00H, 'O'
	DB	00H, 'L', 00H, 'U', 00H, 'M', 00H, 'E', 00H, '_', 00H, 'I', 00H
	DB	'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
$SG67577 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'D', 00H, 'I', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, 'O', 00H, 'R', 00H, 'Y', 00H, '_', 00H, 'C', 00H, 'O', 00H
	DB	'N', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG67578 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H, '_', 00H, 'S'
	DB	00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '_', 00H
	DB	'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L'
	DB	00H, 00H, 00H
	ORG $+2
$SG67579 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H
	DB	'O', 00H, 'L', 00H, 00H, 00H
$SG67580 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'N'
	DB	00H, 'A', 00H, 'L', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG67581 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'H', 00H, 'U', 00H, 'T', 00H, 'D', 00H, 'O'
	DB	00H, 'W', 00H, 'N', 00H, 00H, 00H
$SG67582 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '_', 00H, 'C'
	DB	00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'L', 00H
	DB	00H, 00H
$SG67583 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'L', 00H, 'E', 00H, 'A', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, 00H, 00H
	ORG $+2
$SG67584 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '_', 00H, 'M', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'S', 00H
	DB	'L', 00H, 'O', 00H, 'T', 00H, 00H, 00H
	ORG $+2
$SG67585 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'S', 00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H
	DB	'T', 00H, 'Y', 00H, 00H, 00H
$SG67586 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H, 'T', 00H, 'Y', 00H
	DB	00H, 00H
$SG67587 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H, 'R', 00H, 00H
	DB	00H
	ORG $+2
$SG67588 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H
	DB	'O', 00H, 'L', 00H, 00H, 00H
$SG67589 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H
	DB	'E', 00H, 00H, 00H
	ORG $+2
$SG67590 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'Q', 00H, 'U', 00H, 'O', 00H, 'T', 00H, 'A', 00H, 00H, 00H
	ORG $+2
$SG67591 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'Q', 00H, 'U'
	DB	00H, 'O', 00H, 'T', 00H, 'A', 00H, 00H, 00H
	ORG $+2
$SG67592 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'J', 00H
	DB	'_', 00H, 'P', 00H, 'N', 00H, 'P', 00H, 00H, 00H
	ORG $+2
$SG67594 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'R', 00H, 'T', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	00H, 00H
$SG67595 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, 00H, 00H
	ORG $+2
$SG67596 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E'
	DB	00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H
	DB	'E', 00H, 00H, 00H
	ORG $+2
$SG67597 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'C', 00H, 'A', 00H, 'N', 00H, 'C', 00H, 'E', 00H, 'L'
	DB	00H, '_', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'E', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C'
	DB	00H, 'E', 00H, 00H, 00H
$SG67598 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, '_', 00H, 'D'
	DB	00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG67599 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, '_', 00H, 'D', 00H
	DB	'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG67600 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'C', 00H, 'A', 00H, 'N', 00H, 'C', 00H, 'E', 00H, 'L'
	DB	00H, '_', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, '_', 00H
	DB	'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, 00H
	DB	00H
$SG67601 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'L', 00H, 'A', 00H, 'T', 00H, 'I'
	DB	00H, 'O', 00H, 'N', 00H, 'S', 00H, 00H, 00H
$SG67602 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'F', 00H
	DB	'A', 00H, 'C', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG67603 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'C', 00H, 'A', 00H, 'P', 00H, 'A', 00H, 'B', 00H, 'I', 00H
	DB	'L', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'E', 00H, 'S', 00H, 00H
	DB	00H
$SG67604 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'R', 00H, 'E', 00H, 'S', 00H, 'O', 00H, 'U', 00H, 'R', 00H
	DB	'C', 00H, 'E', 00H, 'S', 00H, 00H, 00H
	ORG $+6
$SG67605 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'R', 00H, 'E', 00H, 'S', 00H, 'O', 00H, 'U', 00H, 'R', 00H
	DB	'C', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'Q', 00H, 'U'
	DB	00H, 'I', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'T', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG67606 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H
	DB	'_', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 00H, 00H
	ORG $+6
$SG67607 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'T', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'R', 00H, 'E', 00H, 'S', 00H, 'O', 00H, 'U', 00H
	DB	'R', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'Q'
	DB	00H, 'U', 00H, 'I', 00H, 'R', 00H, 'E', 00H, 'M', 00H, 'E', 00H
	DB	'N', 00H, 'T', 00H, 'S', 00H, 00H, 00H
$SG67608 DB	'u', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, 00H, 00H
$SG67609 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, '_', 00H, 'C'
	DB	00H, 'O', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'G', 00H, 00H, 00H
	ORG $+2
$SG67610 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'W', 00H, 'R', 00H, 'I', 00H, 'T', 00H, 'E', 00H, '_'
	DB	00H, 'C', 00H, 'O', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'G', 00H
	DB	00H, 00H
$SG67611 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'E', 00H, 'J', 00H, 'E', 00H, 'C', 00H, 'T', 00H, 00H
	DB	00H
	ORG $+2
$SG67612 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'L', 00H, 'O'
	DB	00H, 'C', 00H, 'K', 00H, 00H, 00H
$SG67613 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG67614 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'P', 00H, 'N', 00H, 'P', 00H, '_', 00H, 'D', 00H, 'E', 00H
	DB	'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, 00H, 00H
$SG67615 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'B', 00H, 'U', 00H, 'S', 00H, '_', 00H, 'I', 00H, 'N', 00H
	DB	'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, 'I'
	DB	00H, 'O', 00H, 'N', 00H, 00H, 00H
	ORG $+6
$SG67616 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'U', 00H, 'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H
	DB	'_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'I'
	DB	00H, 'C', 00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H
	DB	00H, 00H
	ORG $+2
$SG67617 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'U', 00H, 'R', 00H, 'P', 00H, 'R', 00H, 'I'
	DB	00H, 'S', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'M', 00H
	DB	'O', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 00H, 00H
$SG67619 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'W', 00H, 'A', 00H, 'I', 00H, 'T', 00H, '_', 00H, 'W'
	DB	00H, 'A', 00H, 'K', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG67620 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H, 'R', 00H, '_'
	DB	00H, 'S', 00H, 'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 00H, 00H
$SG67621 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'P', 00H, 'O'
	DB	00H, 'W', 00H, 'E', 00H, 'R', 00H, 00H, 00H
	ORG $+2
$SG67622 DB	'I', 00H, 'R', 00H, 'P', 00H, '_', 00H, 'M', 00H, 'N', 00H
	DB	'_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'R', 00H, 'Y', 00H, '_'
	DB	00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H, 'R', 00H, 00H, 00H
	ORG $+2
$SG67663 DB	'%', 00H, '#', 00H, 'x', 00H, 00H, 00H
$SG67764 DB	'%', 00H, '#', 00H, 'x', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?AllocFromHeap@@YAPAXPAXK@Z			; AllocFromHeap
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\krnlutils.cpp
_TEXT	SEGMENT
_pMem$ = -4						; size = 4
_hHeap$ = 8						; size = 4
_cbBufSize$ = 12					; size = 4
?AllocFromHeap@@YAPAXPAXK@Z PROC			; AllocFromHeap

; 95   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 96   : 	PVOID pMem = HeapAlloc(hHeap, 0, cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	call	DWORD PTR __imp__HeapAlloc@12
	mov	DWORD PTR _pMem$[ebp], eax

; 97   : 	if (pMem == NULL) {

	cmp	DWORD PTR _pMem$[ebp], 0
	jne	SHORT $LN1@AllocFromH

; 98   : 
; 99   : 		// HeapAlloc does not call SetLastError() on its own.
; 100  : 		//
; 101  : 		SetLastError(ERROR_NOT_ENOUGH_MEMORY);

	push	8
	call	DWORD PTR __imp__SetLastError@4
$LN1@AllocFromH:

; 102  : 	}
; 103  : 	return pMem;

	mov	eax, DWORD PTR _pMem$[ebp]

; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AllocFromHeap@@YAPAXPAXK@Z ENDP			; AllocFromHeap
_TEXT	ENDS
PUBLIC	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z		; CopyToBuffer
PUBLIC	?StringCbLengthW@@YGJPB_WIPAI@Z			; StringCbLengthW
PUBLIC	?AppendString@@YAHPA_WPAPADPAK2PAX@Z		; AppendString
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cbItemLen$ = -4					; size = 4
_wszItem$ = 8						; size = 4
_ppFmtBuf$ = 12						; size = 4
_pcbOffset$ = 16					; size = 4
_pcbBufSize$ = 20					; size = 4
_hHeap$ = 24						; size = 4
?AppendString@@YAHPA_WPAPADPAK2PAX@Z PROC		; AppendString

; 114  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 115  : 	SIZE_T	cbItemLen;
; 116  : 
; 117  : 	StringCbLength(wszItem, STRSAFE_MAX_CCH, (size_t*) &cbItemLen);

	lea	eax, DWORD PTR _cbItemLen$[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _wszItem$[ebp]
	push	ecx
	call	?StringCbLengthW@@YGJPB_WIPAI@Z		; StringCbLengthW

; 118  : 	cbItemLen += sizeof (WCHAR);

	mov	edx, DWORD PTR _cbItemLen$[ebp]
	add	edx, 2
	mov	DWORD PTR _cbItemLen$[ebp], edx

; 119  : 	return CopyToBuffer(ppFmtBuf, pcbOffset, (PCHAR) wszItem, 
; 120  : 		cbItemLen, pcbBufSize, hHeap);

	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbItemLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _wszItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppFmtBuf$[ebp]
	push	edx
	call	?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z	; CopyToBuffer
	add	esp, 24					; 00000018H

; 121  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AppendString@@YAHPA_WPAPADPAK2PAX@Z ENDP		; AppendString
; Function compile flags: /Odtp
; File c:\apps\pw7hp\devpgm\mssdk\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringCbLengthW@@YGJPB_WIPAI@Z
_TEXT	SEGMENT
_hr$ = -12						; size = 4
_cchMax$ = -8						; size = 4
_cchLength$ = -4					; size = 4
_psz$ = 8						; size = 4
_cbMax$ = 12						; size = 4
_pcbLength$ = 16					; size = 4
?StringCbLengthW@@YGJPB_WIPAI@Z PROC			; StringCbLengthW, COMDAT

; 8329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 8330 :     HRESULT hr;
; 8331 :     size_t cchMax = cbMax / sizeof(wchar_t);

	mov	eax, DWORD PTR _cbMax$[ebp]
	shr	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 8332 :     size_t cchLength = 0;

	mov	DWORD PTR _cchLength$[ebp], 0

; 8333 : 
; 8334 :     if ((psz == NULL) || (cchMax > STRSAFE_MAX_CCH))

	cmp	DWORD PTR _psz$[ebp], 0
	je	SHORT $LN5@StringCbLe
	cmp	DWORD PTR _cchMax$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@StringCbLe
$LN5@StringCbLe:

; 8335 :     {
; 8336 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 8337 :     }
; 8338 :     else

	jmp	SHORT $LN4@StringCbLe
$LN6@StringCbLe:

; 8339 :     {
; 8340 :         hr = StringLengthWorkerW(psz, cchMax, &cchLength);

	lea	ecx, DWORD PTR _cchLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchMax$[ebp]
	push	edx
	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	?StringLengthWorkerW@@YGJPB_WIPAI@Z	; StringLengthWorkerW
	mov	DWORD PTR _hr$[ebp], eax
$LN4@StringCbLe:

; 8341 :     }
; 8342 : 
; 8343 :     if (pcbLength)

	cmp	DWORD PTR _pcbLength$[ebp], 0
	je	SHORT $LN3@StringCbLe

; 8344 :     {
; 8345 :         if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@StringCbLe

; 8346 :         {
; 8347 :             // safe to multiply cchLength * sizeof(wchar_t) since cchLength < STRSAFE_MAX_CCH and sizeof(wchar_t) is 2
; 8348 :             *pcbLength = cchLength * sizeof(wchar_t);

	mov	ecx, DWORD PTR _cchLength$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _pcbLength$[ebp]
	mov	DWORD PTR [edx], ecx

; 8349 :         }
; 8350 :         else

	jmp	SHORT $LN3@StringCbLe
$LN2@StringCbLe:

; 8351 :         {
; 8352 :             *pcbLength = 0;

	mov	eax, DWORD PTR _pcbLength$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@StringCbLe:

; 8353 :         }
; 8354 :     }
; 8355 : 
; 8356 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 8357 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCbLengthW@@YGJPB_WIPAI@Z ENDP			; StringCbLengthW
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_cchOriginalMax$ = -4					; size = 4
_psz$ = 8						; size = 4
_cchMax$ = 12						; size = 4
_pcchLength$ = 16					; size = 4
?StringLengthWorkerW@@YGJPB_WIPAI@Z PROC		; StringLengthWorkerW

; 8585 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 8586 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 8587 :     size_t cchOriginalMax = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchOriginalMax$[ebp], eax
$LN6@StringLeng:

; 8588 : 
; 8589 :     while (cchMax && (*psz != L'\0'))

	cmp	DWORD PTR _cchMax$[ebp], 0
	je	SHORT $LN5@StringLeng
	mov	ecx, DWORD PTR _psz$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@StringLeng

; 8590 :     {
; 8591 :         psz++;

	mov	eax, DWORD PTR _psz$[ebp]
	add	eax, 2
	mov	DWORD PTR _psz$[ebp], eax

; 8592 :         cchMax--;

	mov	ecx, DWORD PTR _cchMax$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cchMax$[ebp], ecx

; 8593 :     }

	jmp	SHORT $LN6@StringLeng
$LN5@StringLeng:

; 8594 : 
; 8595 :     if (cchMax == 0)

	cmp	DWORD PTR _cchMax$[ebp], 0
	jne	SHORT $LN4@StringLeng

; 8596 :     {
; 8597 :         // the string is longer than cchMax
; 8598 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN4@StringLeng:

; 8599 :     }
; 8600 : 
; 8601 :     if (pcchLength)

	cmp	DWORD PTR _pcchLength$[ebp], 0
	je	SHORT $LN3@StringLeng

; 8602 :     {
; 8603 :         if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@StringLeng

; 8604 :         {
; 8605 :             *pcchLength = cchOriginalMax - cchMax;

	mov	edx, DWORD PTR _cchOriginalMax$[ebp]
	sub	edx, DWORD PTR _cchMax$[ebp]
	mov	eax, DWORD PTR _pcchLength$[ebp]
	mov	DWORD PTR [eax], edx

; 8606 :         }
; 8607 :         else

	jmp	SHORT $LN3@StringLeng
$LN2@StringLeng:

; 8608 :         {
; 8609 :             *pcchLength = 0;

	mov	ecx, DWORD PTR _pcchLength$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@StringLeng:

; 8610 :         }
; 8611 :     }
; 8612 : 
; 8613 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 8614 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringLengthWorkerW@@YGJPB_WIPAI@Z ENDP		; StringLengthWorkerW
_TEXT	ENDS
PUBLIC	?ExtendBuffer@@YAHPAPADPAKKPAX@Z		; ExtendBuffer
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\krnlutils.cpp
_TEXT	SEGMENT
_cbNeeded$ = -4						; size = 4
_ppBuffer$ = 8						; size = 4
_pcbOffset$ = 12					; size = 4
_pSource$ = 16						; size = 4
_cbLen$ = 20						; size = 4
_pcbBufSize$ = 24					; size = 4
_hHeap$ = 28						; size = 4
?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z PROC		; CopyToBuffer

; 132  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 133  : 	SIZE_T cbNeeded = *pcbOffset + cbLen;

	mov	eax, DWORD PTR _pcbOffset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _cbLen$[ebp]
	mov	DWORD PTR _cbNeeded$[ebp], ecx

; 134  : 	if (cbNeeded > *pcbBufSize) {

	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	mov	eax, DWORD PTR _cbNeeded$[ebp]
	cmp	eax, DWORD PTR [edx]
	jbe	SHORT $LN2@CopyToBuff

; 135  : 		if (!ExtendBuffer(ppBuffer, pcbBufSize, cbNeeded, hHeap)) {

	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbNeeded$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppBuffer$[ebp]
	push	ecx
	call	?ExtendBuffer@@YAHPAPADPAKKPAX@Z	; ExtendBuffer
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN2@CopyToBuff

; 136  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@CopyToBuff
$LN2@CopyToBuff:

; 137  : 		}
; 138  : 	}
; 139  : 	memcpy(*ppBuffer + *pcbOffset, pSource, cbLen);

	mov	edx, DWORD PTR _cbLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppBuffer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 140  : 	*pcbOffset += cbLen;

	mov	ecx, DWORD PTR _pcbOffset$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _cbLen$[ebp]
	mov	eax, DWORD PTR _pcbOffset$[ebp]
	mov	DWORD PTR [eax], edx

; 141  : 	return TRUE;

	mov	eax, 1
$LN3@CopyToBuff:

; 142  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CopyToBuffer@@YAHPAPADPAKPADK1PAX@Z ENDP		; CopyToBuffer
_TEXT	ENDS
PUBLIC	?StringCbPrintfW@@YAJPA_WIPB_WZZ		; StringCbPrintfW
PUBLIC	?StringCbCopyW@@YGJPA_WIPB_W@Z			; StringCbCopyW
PUBLIC	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z		; DecodeEnum
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Index$ = -4						; size = 4
_Value$ = 8						; size = 4
_Base$ = 12						; size = 4
_pwszDecodeV$ = 16					; size = 4
_VectLen$ = 20						; size = 4
_pwszOutBuf$ = 24					; size = 4
_cbBufSize$ = 28					; size = 4
?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z PROC		; DecodeEnum

; 153  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 154  : 	INT Index = Value - Base;

	mov	eax, DWORD PTR _Value$[ebp]
	sub	eax, DWORD PTR _Base$[ebp]
	mov	DWORD PTR _Index$[ebp], eax

; 155  : 	if ((Index >= 0) && ((UINT) Index < VectLen)) {

	js	SHORT $LN2@DecodeEnum
	mov	ecx, DWORD PTR _Index$[ebp]
	cmp	ecx, DWORD PTR _VectLen$[ebp]
	jae	SHORT $LN2@DecodeEnum

; 156  : 		StringCbCopyW(pwszOutBuf, cbBufSize, pwszDecodeV[Index]);

	mov	edx, DWORD PTR _Index$[ebp]
	mov	eax, DWORD PTR _pwszDecodeV$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _cbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pwszOutBuf$[ebp]
	push	eax
	call	?StringCbCopyW@@YGJPA_WIPB_W@Z		; StringCbCopyW

; 157  : 	} else {

	jmp	SHORT $LN1@DecodeEnum
$LN2@DecodeEnum:

; 158  : 		StringCbPrintfW(pwszOutBuf, cbBufSize, L"%#x", Value);

	mov	ecx, DWORD PTR _Value$[ebp]
	push	ecx
	push	OFFSET $SG67663
	mov	edx, DWORD PTR _cbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pwszOutBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H
$LN1@DecodeEnum:

; 159  : 	}
; 160  : 
; 161  : 	return pwszOutBuf;

	mov	eax, DWORD PTR _pwszOutBuf$[ebp]

; 162  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z ENDP		; DecodeEnum
; Function compile flags: /Odtp
; File c:\apps\pw7hp\devpgm\mssdk\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringCbCopyW@@YGJPA_WIPB_W@Z
_TEXT	SEGMENT
_cchDest$ = -8						; size = 4
_hr$ = -4						; size = 4
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCbCopyW@@YGJPA_WIPB_W@Z PROC			; StringCbCopyW, COMDAT

; 605  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 606  :     HRESULT hr;
; 607  :     size_t cchDest = cbDest / sizeof(wchar_t);

	mov	eax, DWORD PTR _cbDest$[ebp]
	shr	eax, 1
	mov	DWORD PTR _cchDest$[ebp], eax

; 608  : 
; 609  :     hr = StringValidateDestW(pszDest, cchDest, STRSAFE_MAX_CCH);

	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringValidateDestW@@YGJPB_WII@Z	; StringValidateDestW
	mov	DWORD PTR _hr$[ebp], eax

; 610  : 
; 611  :     if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringCbCo

; 612  :     {
; 613  :         hr = StringCopyWorkerW(pszDest,
; 614  :                                cchDest,
; 615  :                                NULL,
; 616  :                                pszSrc,
; 617  :                                STRSAFE_MAX_LENGTH);

	push	2147483646				; 7ffffffeH
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCopyWorkerW@@YGJPA_WIPAIPB_WI@Z	; StringCopyWorkerW
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCbCo:

; 618  :     }
; 619  : 
; 620  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 621  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCbCopyW@@YGJPA_WIPB_W@Z ENDP			; StringCbCopyW
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?StringCbPrintfW@@YAJPA_WIPB_WZZ
_TEXT	SEGMENT
_argList$66471 = -12					; size = 4
_cchDest$ = -8						; size = 4
_hr$ = -4						; size = 4
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCbPrintfW@@YAJPA_WIPB_WZZ PROC			; StringCbPrintfW, COMDAT

; 4797 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4798 :     HRESULT hr;
; 4799 :     size_t cchDest = cbDest / sizeof(wchar_t);

	mov	eax, DWORD PTR _cbDest$[ebp]
	shr	eax, 1
	mov	DWORD PTR _cchDest$[ebp], eax

; 4800 : 
; 4801 :     hr = StringValidateDestW(pszDest, cchDest, STRSAFE_MAX_CCH);

	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringValidateDestW@@YGJPB_WII@Z	; StringValidateDestW
	mov	DWORD PTR _hr$[ebp], eax

; 4802 :     
; 4803 :     if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringCbPr

; 4804 :     {
; 4805 :         va_list argList;
; 4806 : 
; 4807 :         va_start(argList, pszFormat);

	lea	eax, DWORD PTR _pszFormat$[ebp+4]
	mov	DWORD PTR _argList$66471[ebp], eax

; 4808 : 
; 4809 :         hr = StringVPrintfWorkerW(pszDest,
; 4810 :                                   cchDest,
; 4811 :                                   NULL,
; 4812 :                                   pszFormat,
; 4813 :                                   argList);

	mov	ecx, DWORD PTR _argList$66471[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFormat$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	push	ecx
	call	?StringVPrintfWorkerW@@YGJPA_WIPAIPB_WPAD@Z ; StringVPrintfWorkerW
	mov	DWORD PTR _hr$[ebp], eax

; 4814 : 
; 4815 :         va_end(argList);

	mov	DWORD PTR _argList$66471[ebp], 0
$LN1@StringCbPr:

; 4816 :     }
; 4817 : 
; 4818 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4819 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StringCbPrintfW@@YAJPA_WIPB_WZZ ENDP			; StringCbPrintfW
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_cchMax$ = 16						; size = 4
?StringValidateDestW@@YGJPB_WII@Z PROC			; StringValidateDestW

; 8769 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 8770 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 8771 : 
; 8772 :     if ((cchDest == 0) || (cchDest > cchMax))

	cmp	DWORD PTR _cchDest$[ebp], 0
	je	SHORT $LN1@StringVali
	mov	eax, DWORD PTR _cchDest$[ebp]
	cmp	eax, DWORD PTR _cchMax$[ebp]
	jbe	SHORT $LN2@StringVali
$LN1@StringVali:

; 8773 :     {
; 8774 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN2@StringVali:

; 8775 :     }
; 8776 : 
; 8777 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 8778 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringValidateDestW@@YGJPB_WII@Z ENDP			; StringValidateDestW
; Function compile flags: /Odtp
_hr$ = -8						; size = 4
_cchNewDestLength$ = -4					; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pcchNewDestLength$ = 16				; size = 4
_pszSrc$ = 20						; size = 4
_cchToCopy$ = 24					; size = 4
?StringCopyWorkerW@@YGJPA_WIPAIPB_WI@Z PROC		; StringCopyWorkerW

; 8988 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 8989 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 8990 :     size_t cchNewDestLength = 0;

	mov	DWORD PTR _cchNewDestLength$[ebp], 0
$LN4@StringCopy:

; 8991 :     
; 8992 :     // ASSERT(cchDest != 0);
; 8993 : 
; 8994 :     while (cchDest && cchToCopy && (*pszSrc != L'\0'))

	cmp	DWORD PTR _cchDest$[ebp], 0
	je	SHORT $LN3@StringCopy
	cmp	DWORD PTR _cchToCopy$[ebp], 0
	je	SHORT $LN3@StringCopy
	mov	eax, DWORD PTR _pszSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StringCopy

; 8995 :     {
; 8996 :         *pszDest++ = *pszSrc++;

	mov	edx, DWORD PTR _pszDest$[ebp]
	mov	eax, DWORD PTR _pszSrc$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
	mov	edx, DWORD PTR _pszDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszDest$[ebp], edx
	mov	eax, DWORD PTR _pszSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszSrc$[ebp], eax

; 8997 :         cchDest--;

	mov	ecx, DWORD PTR _cchDest$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cchDest$[ebp], ecx

; 8998 :         cchToCopy--;

	mov	edx, DWORD PTR _cchToCopy$[ebp]
	sub	edx, 1
	mov	DWORD PTR _cchToCopy$[ebp], edx

; 8999 : 
; 9000 :         cchNewDestLength++;

	mov	eax, DWORD PTR _cchNewDestLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _cchNewDestLength$[ebp], eax

; 9001 :     }

	jmp	SHORT $LN4@StringCopy
$LN3@StringCopy:

; 9002 : 
; 9003 :     if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN2@StringCopy

; 9004 :     {
; 9005 :         // we are going to truncate pszDest
; 9006 :         pszDest--;

	mov	ecx, DWORD PTR _pszDest$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _pszDest$[ebp], ecx

; 9007 :         cchNewDestLength--;

	mov	edx, DWORD PTR _cchNewDestLength$[ebp]
	sub	edx, 1
	mov	DWORD PTR _cchNewDestLength$[ebp], edx

; 9008 : 
; 9009 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
$LN2@StringCopy:

; 9010 :     }
; 9011 : 
; 9012 :     *pszDest = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	mov	WORD PTR [ecx], ax

; 9013 : 
; 9014 :     if (pcchNewDestLength)

	cmp	DWORD PTR _pcchNewDestLength$[ebp], 0
	je	SHORT $LN1@StringCopy

; 9015 :     {
; 9016 :         *pcchNewDestLength = cchNewDestLength;

	mov	edx, DWORD PTR _pcchNewDestLength$[ebp]
	mov	eax, DWORD PTR _cchNewDestLength$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@StringCopy:

; 9017 :     }
; 9018 : 
; 9019 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 9020 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?StringCopyWorkerW@@YGJPA_WIPAIPB_WI@Z ENDP		; StringCopyWorkerW
_TEXT	ENDS
EXTRN	__vsnwprintf:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hr$ = -16						; size = 4
_iRet$ = -12						; size = 4
_cchMax$ = -8						; size = 4
_cchNewDestLength$ = -4					; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pcchNewDestLength$ = 16				; size = 4
_pszFormat$ = 20					; size = 4
_argList$ = 24						; size = 4
?StringVPrintfWorkerW@@YGJPA_WIPAIPB_WPAD@Z PROC	; StringVPrintfWorkerW

; 9145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 9146 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 9147 :     int iRet;
; 9148 :     size_t cchMax;
; 9149 :     size_t cchNewDestLength = 0;

	mov	DWORD PTR _cchNewDestLength$[ebp], 0

; 9150 : 
; 9151 :     // leave the last space for the null terminator
; 9152 :     cchMax = cchDest - 1;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 9153 : 
; 9154 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9155 :     iRet = _vsnwprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9156 : #else
; 9157 :     #pragma warning(push)
; 9158 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9159 :     iRet = _vsnwprintf(pszDest, cchMax, pszFormat, argList);

	mov	ecx, DWORD PTR _argList$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFormat$[ebp]
	push	edx
	mov	eax, DWORD PTR _cchMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	push	ecx
	call	__vsnwprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iRet$[ebp], eax

; 9160 :     #pragma warning(pop)
; 9161 : #endif
; 9162 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9163 : 
; 9164 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

	cmp	DWORD PTR _iRet$[ebp], 0
	jl	SHORT $LN5@StringVPri
	mov	edx, DWORD PTR _iRet$[ebp]
	cmp	edx, DWORD PTR _cchMax$[ebp]
	jbe	SHORT $LN6@StringVPri
$LN5@StringVPri:

; 9165 :     {
; 9166 :         // need to null terminate the string
; 9167 :         pszDest += cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	ecx, DWORD PTR _pszDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pszDest$[ebp], edx

; 9168 :         *pszDest = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	mov	WORD PTR [ecx], ax

; 9169 : 
; 9170 :         cchNewDestLength = cchMax;

	mov	edx, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchNewDestLength$[ebp], edx

; 9171 : 
; 9172 :         // we have truncated pszDest
; 9173 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
	jmp	SHORT $LN4@StringVPri
$LN6@StringVPri:

; 9174 :     }
; 9175 :     else if (((size_t)iRet) == cchMax)

	mov	eax, DWORD PTR _iRet$[ebp]
	cmp	eax, DWORD PTR _cchMax$[ebp]
	jne	SHORT $LN3@StringVPri

; 9176 :     {
; 9177 :         // need to null terminate the string
; 9178 :         pszDest += cchMax;

	mov	ecx, DWORD PTR _cchMax$[ebp]
	mov	edx, DWORD PTR _pszDest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pszDest$[ebp], eax

; 9179 :         *pszDest = L'\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	mov	WORD PTR [edx], cx

; 9180 : 
; 9181 :         cchNewDestLength = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchNewDestLength$[ebp], eax

; 9182 :     }
; 9183 :     else

	jmp	SHORT $LN4@StringVPri
$LN3@StringVPri:

; 9184 :     {
; 9185 :         cchNewDestLength = (size_t)iRet;

	mov	ecx, DWORD PTR _iRet$[ebp]
	mov	DWORD PTR _cchNewDestLength$[ebp], ecx
$LN4@StringVPri:

; 9186 :     }
; 9187 : 
; 9188 :     if (pcchNewDestLength)

	cmp	DWORD PTR _pcchNewDestLength$[ebp], 0
	je	SHORT $LN1@StringVPri

; 9189 :     {
; 9190 :         *pcchNewDestLength = cchNewDestLength;

	mov	edx, DWORD PTR _pcchNewDestLength$[ebp]
	mov	eax, DWORD PTR _cchNewDestLength$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@StringVPri:

; 9191 :     }
; 9192 : 
; 9193 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 9194 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?StringVPrintfWorkerW@@YGJPA_WIPAIPB_WPAD@Z ENDP	; StringVPrintfWorkerW
_TEXT	ENDS
EXTRN	__imp__HeapFree@12:PROC
; Function compile flags: /Odtp
; File b:\programm\wntsys\testfilter\release\1_1\source\krnlutils\krnlutils.cpp
_TEXT	SEGMENT
_pNew$ = -4						; size = 4
_ppBuffer$ = 8						; size = 4
_pcbBufSize$ = 12					; size = 4
_cbNeeded$ = 16						; size = 4
_hHeap$ = 20						; size = 4
?ExtendBuffer@@YAHPAPADPAKKPAX@Z PROC			; ExtendBuffer

; 171  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 172  : 	PCHAR pNew = (PCHAR) AllocFromHeap(hHeap, cbNeeded);

	mov	eax, DWORD PTR _cbNeeded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	call	?AllocFromHeap@@YAPAXPAXK@Z		; AllocFromHeap
	add	esp, 8
	mov	DWORD PTR _pNew$[ebp], eax

; 173  : 	if (pNew == NULL) return FALSE;

	cmp	DWORD PTR _pNew$[ebp], 0
	jne	SHORT $LN1@ExtendBuff
	xor	eax, eax
	jmp	SHORT $LN2@ExtendBuff
$LN1@ExtendBuff:

; 174  : 	memcpy(pNew, *ppBuffer, *pcbBufSize);

	mov	edx, DWORD PTR _pcbBufSize$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _ppBuffer$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 175  : 	HeapFree(hHeap, 0, *ppBuffer);

	mov	ecx, DWORD PTR _ppBuffer$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	mov	eax, DWORD PTR _hHeap$[ebp]
	push	eax
	call	DWORD PTR __imp__HeapFree@12

; 176  : 	*ppBuffer = pNew;

	mov	ecx, DWORD PTR _ppBuffer$[ebp]
	mov	edx, DWORD PTR _pNew$[ebp]
	mov	DWORD PTR [ecx], edx

; 177  : 	*pcbBufSize = cbNeeded;

	mov	eax, DWORD PTR _pcbBufSize$[ebp]
	mov	ecx, DWORD PTR _cbNeeded$[ebp]
	mov	DWORD PTR [eax], ecx

; 178  : 
; 179  : 	return TRUE;

	mov	eax, 1
$LN2@ExtendBuff:

; 180  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExtendBuffer@@YAHPAPADPAKKPAX@Z ENDP			; ExtendBuffer
_TEXT	ENDS
PUBLIC	_FormatIoStack
EXTRN	?FormatIoStackWin7X64@@YAHPADPAPA_W@Z:PROC	; FormatIoStackWin7X64
EXTRN	?FormatIoStackWlhX64@@YAHPADPAPA_W@Z:PROC	; FormatIoStackWlhX64
EXTRN	?FormatIoStackWin7X86@@YAHPADPAPA_W@Z:PROC	; FormatIoStackWin7X86
EXTRN	?FormatIoStackWlhX86@@YAHPADPAPA_W@Z:PROC	; FormatIoStackWlhX86
EXTRN	?FormatIoStackWxpX86@@YAHPADPAPA_W@Z:PROC	; FormatIoStackWxpX86
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pStackData$ = 8					; size = 4
_ppFStack$ = 12						; size = 4
_Arch$ = 16						; size = 4
_OsVer$ = 20						; size = 4
_FormatIoStack PROC

; 189  : {

	push	ebp
	mov	ebp, esp

; 190  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN10@FormatIoSt
	cmp	DWORD PTR _OsVer$[ebp], 0
	jne	SHORT $LN10@FormatIoSt

; 191  : 		return FormatIoStackWxpX86(pStackData, ppFStack);

	mov	eax, DWORD PTR _ppFStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStackData$[ebp]
	push	ecx
	call	?FormatIoStackWxpX86@@YAHPADPAPA_W@Z	; FormatIoStackWxpX86
	add	esp, 8
	jmp	$LN11@FormatIoSt
	jmp	$LN11@FormatIoSt
$LN10@FormatIoSt:

; 192  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN8@FormatIoSt
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN8@FormatIoSt

; 193  : 		return FormatIoStackWlhX86(pStackData, ppFStack);

	mov	edx, DWORD PTR _ppFStack$[ebp]
	push	edx
	mov	eax, DWORD PTR _pStackData$[ebp]
	push	eax
	call	?FormatIoStackWlhX86@@YAHPADPAPA_W@Z	; FormatIoStackWlhX86
	add	esp, 8
	jmp	SHORT $LN11@FormatIoSt
	jmp	SHORT $LN11@FormatIoSt
$LN8@FormatIoSt:

; 194  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN6@FormatIoSt
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN6@FormatIoSt

; 195  : 		return FormatIoStackWin7X86(pStackData, ppFStack);

	mov	ecx, DWORD PTR _ppFStack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pStackData$[ebp]
	push	edx
	call	?FormatIoStackWin7X86@@YAHPADPAPA_W@Z	; FormatIoStackWin7X86
	add	esp, 8
	jmp	SHORT $LN11@FormatIoSt
	jmp	SHORT $LN11@FormatIoSt
$LN6@FormatIoSt:

; 196  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN4@FormatIoSt
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN4@FormatIoSt

; 197  : 		return FormatIoStackWlhX64(pStackData, ppFStack);

	mov	eax, DWORD PTR _ppFStack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStackData$[ebp]
	push	ecx
	call	?FormatIoStackWlhX64@@YAHPADPAPA_W@Z	; FormatIoStackWlhX64
	add	esp, 8
	jmp	SHORT $LN11@FormatIoSt
	jmp	SHORT $LN11@FormatIoSt
$LN4@FormatIoSt:

; 198  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN2@FormatIoSt
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN2@FormatIoSt

; 199  : 		return FormatIoStackWin7X64(pStackData, ppFStack);

	mov	edx, DWORD PTR _ppFStack$[ebp]
	push	edx
	mov	eax, DWORD PTR _pStackData$[ebp]
	push	eax
	call	?FormatIoStackWin7X64@@YAHPADPAPA_W@Z	; FormatIoStackWin7X64
	add	esp, 8
	jmp	SHORT $LN11@FormatIoSt

; 200  : 	} else {

	jmp	SHORT $LN11@FormatIoSt
$LN2@FormatIoSt:

; 201  : 		SetLastError(ERROR_INVALID_PARAMETER);

	push	87					; 00000057H
	call	DWORD PTR __imp__SetLastError@4

; 202  : 		return FALSE;

	xor	eax, eax
$LN11@FormatIoSt:

; 203  : 	}
; 204  : }

	pop	ebp
	ret	0
_FormatIoStack ENDP
_TEXT	ENDS
PUBLIC	_FormatIrp
EXTRN	?FormatIrpWin7X64@@YAHPADPAPA_W@Z:PROC		; FormatIrpWin7X64
EXTRN	?FormatIrpWlhX64@@YAHPADPAPA_W@Z:PROC		; FormatIrpWlhX64
EXTRN	?FormatIrpWin7X86@@YAHPADPAPA_W@Z:PROC		; FormatIrpWin7X86
EXTRN	?FormatIrpWlhX86@@YAHPADPAPA_W@Z:PROC		; FormatIrpWlhX86
EXTRN	?FormatIrpWxpX86@@YAHPADPAPA_W@Z:PROC		; FormatIrpWxpX86
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pIrpData$ = 8						; size = 4
_ppFIrp$ = 12						; size = 4
_Arch$ = 16						; size = 4
_OsVer$ = 20						; size = 4
_FormatIrp PROC

; 214  : {

	push	ebp
	mov	ebp, esp

; 215  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN10@FormatIrp
	cmp	DWORD PTR _OsVer$[ebp], 0
	jne	SHORT $LN10@FormatIrp

; 216  : 		return FormatIrpWxpX86(pIrpData, ppFIrp);

	mov	eax, DWORD PTR _ppFIrp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIrpData$[ebp]
	push	ecx
	call	?FormatIrpWxpX86@@YAHPADPAPA_W@Z	; FormatIrpWxpX86
	add	esp, 8
	jmp	$LN11@FormatIrp
	jmp	$LN11@FormatIrp
$LN10@FormatIrp:

; 217  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN8@FormatIrp
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN8@FormatIrp

; 218  : 		return FormatIrpWlhX86(pIrpData, ppFIrp);

	mov	edx, DWORD PTR _ppFIrp$[ebp]
	push	edx
	mov	eax, DWORD PTR _pIrpData$[ebp]
	push	eax
	call	?FormatIrpWlhX86@@YAHPADPAPA_W@Z	; FormatIrpWlhX86
	add	esp, 8
	jmp	SHORT $LN11@FormatIrp
	jmp	SHORT $LN11@FormatIrp
$LN8@FormatIrp:

; 219  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN6@FormatIrp
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN6@FormatIrp

; 220  : 		return FormatIrpWin7X86(pIrpData, ppFIrp);

	mov	ecx, DWORD PTR _ppFIrp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pIrpData$[ebp]
	push	edx
	call	?FormatIrpWin7X86@@YAHPADPAPA_W@Z	; FormatIrpWin7X86
	add	esp, 8
	jmp	SHORT $LN11@FormatIrp
	jmp	SHORT $LN11@FormatIrp
$LN6@FormatIrp:

; 221  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN4@FormatIrp
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN4@FormatIrp

; 222  : 		return FormatIrpWlhX64(pIrpData, ppFIrp);

	mov	eax, DWORD PTR _ppFIrp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIrpData$[ebp]
	push	ecx
	call	?FormatIrpWlhX64@@YAHPADPAPA_W@Z	; FormatIrpWlhX64
	add	esp, 8
	jmp	SHORT $LN11@FormatIrp
	jmp	SHORT $LN11@FormatIrp
$LN4@FormatIrp:

; 223  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN2@FormatIrp
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN2@FormatIrp

; 224  : 		return FormatIrpWin7X64(pIrpData, ppFIrp);

	mov	edx, DWORD PTR _ppFIrp$[ebp]
	push	edx
	mov	eax, DWORD PTR _pIrpData$[ebp]
	push	eax
	call	?FormatIrpWin7X64@@YAHPADPAPA_W@Z	; FormatIrpWin7X64
	add	esp, 8
	jmp	SHORT $LN11@FormatIrp

; 225  : 	} else {

	jmp	SHORT $LN11@FormatIrp
$LN2@FormatIrp:

; 226  : 		SetLastError(ERROR_INVALID_PARAMETER);

	push	87					; 00000057H
	call	DWORD PTR __imp__SetLastError@4

; 227  : 		return FALSE;

	xor	eax, eax
$LN11@FormatIrp:

; 228  : 	}
; 229  : 
; 230  : }

	pop	ebp
	ret	0
_FormatIrp ENDP
_TEXT	ENDS
PUBLIC	_FreeFmtIrp
EXTRN	__imp__GetProcessHeap@0:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hHeap$ = -4						; size = 4
_pFIrp$ = 8						; size = 4
_FreeFmtIrp PROC

; 236  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 237  : 	HANDLE hHeap = GetProcessHeap();

	call	DWORD PTR __imp__GetProcessHeap@0
	mov	DWORD PTR _hHeap$[ebp], eax

; 238  : 	if (hHeap != NULL) {

	cmp	DWORD PTR _hHeap$[ebp], 0
	je	SHORT $LN2@FreeFmtIrp

; 239  : 		HeapFree(hHeap, 0, pFIrp);

	mov	eax, DWORD PTR _pFIrp$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	call	DWORD PTR __imp__HeapFree@12
$LN2@FreeFmtIrp:

; 240  : 	}
; 241  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_FreeFmtIrp ENDP
_TEXT	ENDS
PUBLIC	_FreeFmtStack
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hHeap$ = -4						; size = 4
_pFStack$ = 8						; size = 4
_FreeFmtStack PROC

; 247  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 248  : 	HANDLE hHeap = GetProcessHeap();

	call	DWORD PTR __imp__GetProcessHeap@0
	mov	DWORD PTR _hHeap$[ebp], eax

; 249  : 	if (hHeap != NULL) {

	cmp	DWORD PTR _hHeap$[ebp], 0
	je	SHORT $LN2@FreeFmtSta

; 250  : 		HeapFree(hHeap, 0, pFStack);

	mov	eax, DWORD PTR _pFStack$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hHeap$[ebp]
	push	ecx
	call	DWORD PTR __imp__HeapFree@12
$LN2@FreeFmtSta:

; 251  : 	}
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_FreeFmtStack ENDP
_TEXT	ENDS
PUBLIC	_IoStackSize
EXTRN	?IoStackSizeWin7X64@@YAKXZ:PROC			; IoStackSizeWin7X64
EXTRN	?IoStackSizeWlhX64@@YAKXZ:PROC			; IoStackSizeWlhX64
EXTRN	?IoStackSizeWin7X86@@YAKXZ:PROC			; IoStackSizeWin7X86
EXTRN	?IoStackSizeWlhX86@@YAKXZ:PROC			; IoStackSizeWlhX86
EXTRN	?IoStackSizeWxpX86@@YAKXZ:PROC			; IoStackSizeWxpX86
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Arch$ = 8						; size = 4
_OsVer$ = 12						; size = 4
_IoStackSize PROC

; 259  : {

	push	ebp
	mov	ebp, esp

; 260  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN10@IoStackSiz
	cmp	DWORD PTR _OsVer$[ebp], 0
	jne	SHORT $LN10@IoStackSiz

; 261  : 		return IoStackSizeWxpX86();

	call	?IoStackSizeWxpX86@@YAKXZ		; IoStackSizeWxpX86
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN11@IoStackSiz
$LN10@IoStackSiz:

; 262  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN8@IoStackSiz
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN8@IoStackSiz

; 263  : 		return IoStackSizeWlhX86();

	call	?IoStackSizeWlhX86@@YAKXZ		; IoStackSizeWlhX86
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN11@IoStackSiz
$LN8@IoStackSiz:

; 264  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN6@IoStackSiz
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN6@IoStackSiz

; 265  : 		return IoStackSizeWin7X86();

	call	?IoStackSizeWin7X86@@YAKXZ		; IoStackSizeWin7X86
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN11@IoStackSiz
$LN6@IoStackSiz:

; 266  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN4@IoStackSiz
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN4@IoStackSiz

; 267  : 		return IoStackSizeWlhX64();

	call	?IoStackSizeWlhX64@@YAKXZ		; IoStackSizeWlhX64
	jmp	SHORT $LN11@IoStackSiz
	jmp	SHORT $LN11@IoStackSiz
$LN4@IoStackSiz:

; 268  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN2@IoStackSiz
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN2@IoStackSiz

; 269  : 		return IoStackSizeWin7X64();

	call	?IoStackSizeWin7X64@@YAKXZ		; IoStackSizeWin7X64
	jmp	SHORT $LN11@IoStackSiz

; 270  : 	} else {

	jmp	SHORT $LN11@IoStackSiz
$LN2@IoStackSiz:

; 271  : 		return 0;

	xor	eax, eax
$LN11@IoStackSiz:

; 272  : 	}
; 273  : }

	pop	ebp
	ret	0
_IoStackSize ENDP
_TEXT	ENDS
PUBLIC	_IrpSize
EXTRN	?IrpSizeWin7X64@@YAKXZ:PROC			; IrpSizeWin7X64
EXTRN	?IrpSizeWlhX64@@YAKXZ:PROC			; IrpSizeWlhX64
EXTRN	?IrpSizeWin7X86@@YAKXZ:PROC			; IrpSizeWin7X86
EXTRN	?IrpSizeWlhX86@@YAKXZ:PROC			; IrpSizeWlhX86
EXTRN	?IrpSizeWxpX86@@YAKXZ:PROC			; IrpSizeWxpX86
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Arch$ = 8						; size = 4
_OsVer$ = 12						; size = 4
_IrpSize PROC

; 280  : {

	push	ebp
	mov	ebp, esp

; 281  : 	if ((Arch == ARCH_X86) && (OsVer == OSVER_XP)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN10@IrpSize
	cmp	DWORD PTR _OsVer$[ebp], 0
	jne	SHORT $LN10@IrpSize

; 282  : 		return IrpSizeWxpX86();

	call	?IrpSizeWxpX86@@YAKXZ			; IrpSizeWxpX86
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN11@IrpSize
$LN10@IrpSize:

; 283  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN8@IrpSize
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN8@IrpSize

; 284  : 		return IrpSizeWlhX86();

	call	?IrpSizeWlhX86@@YAKXZ			; IrpSizeWlhX86
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN11@IrpSize
$LN8@IrpSize:

; 285  : 	} else if ((Arch == ARCH_X86) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 0
	jne	SHORT $LN6@IrpSize
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN6@IrpSize

; 286  : 		return IrpSizeWin7X86();

	call	?IrpSizeWin7X86@@YAKXZ			; IrpSizeWin7X86
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN11@IrpSize
$LN6@IrpSize:

; 287  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_VISTA)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN4@IrpSize
	cmp	DWORD PTR _OsVer$[ebp], 1
	jne	SHORT $LN4@IrpSize

; 288  : 		return IrpSizeWlhX64();

	call	?IrpSizeWlhX64@@YAKXZ			; IrpSizeWlhX64
	jmp	SHORT $LN11@IrpSize
	jmp	SHORT $LN11@IrpSize
$LN4@IrpSize:

; 289  : 	} else if ((Arch == ARCH_X64) && (OsVer == OSVER_WIN7)) {

	cmp	DWORD PTR _Arch$[ebp], 1
	jne	SHORT $LN2@IrpSize
	cmp	DWORD PTR _OsVer$[ebp], 2
	jne	SHORT $LN2@IrpSize

; 290  : 		return IrpSizeWin7X64();

	call	?IrpSizeWin7X64@@YAKXZ			; IrpSizeWin7X64
	jmp	SHORT $LN11@IrpSize

; 291  : 	} else {

	jmp	SHORT $LN11@IrpSize
$LN2@IrpSize:

; 292  : 		return 0;

	xor	eax, eax
$LN11@IrpSize:

; 293  : 	}
; 294  : }

	pop	ebp
	ret	0
_IrpSize ENDP
_TEXT	ENDS
PUBLIC	_MajorFunctionDes
; Function compile flags: /Odtp
_TEXT	SEGMENT
_MajorFunction$ = 8					; size = 1
_pwszDecodeBuf$ = 12					; size = 4
_cbBufSize$ = 16					; size = 4
_MajorFunctionDes PROC

; 302  : {

	push	ebp
	mov	ebp, esp

; 303  : 	return DecodeEnum(
; 304  : 		MajorFunction,
; 305  : 		0,
; 306  : 		pwszMajorFunctionV,
; 307  : 		sizeof pwszMajorFunctionV / sizeof(PWSTR),
; 308  : 		pwszDecodeBuf,
; 309  : 		cbBufSize);

	mov	eax, DWORD PTR _cbBufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pwszDecodeBuf$[ebp]
	push	ecx
	push	28					; 0000001cH
	push	OFFSET ?pwszMajorFunctionV@@3PAPA_WA	; pwszMajorFunctionV
	push	0
	movzx	edx, BYTE PTR _MajorFunction$[ebp]
	push	edx
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H

; 310  : }

	pop	ebp
	ret	0
_MajorFunctionDes ENDP
_TEXT	ENDS
PUBLIC	_MinorFunctionDes
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = -4						; size = 4
_MajorFunction$ = 8					; size = 1
_MinorFunction$ = 12					; size = 1
_pwszDecodeBuf$ = 16					; size = 4
_cbBufSize$ = 20					; size = 4
_MinorFunctionDes PROC

; 319  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 320  : 	switch (MajorFunction) {

	mov	al, BYTE PTR _MajorFunction$[ebp]
	mov	BYTE PTR tv65[ebp], al
	cmp	BYTE PTR tv65[ebp], 22			; 00000016H
	je	SHORT $LN2@MinorFunct
	cmp	BYTE PTR tv65[ebp], 27			; 0000001bH
	je	SHORT $LN3@MinorFunct
	jmp	SHORT $LN1@MinorFunct
$LN3@MinorFunct:

; 321  : 		case IRP_MJ_PNP:
; 322  : 			return DecodeEnum(
; 323  : 				MinorFunction,
; 324  : 				0,
; 325  : 				pwszPnpMinorFunctionV,
; 326  : 				sizeof pwszPnpMinorFunctionV / sizeof (PWSTR),
; 327  : 				pwszDecodeBuf,
; 328  : 				cbBufSize);

	mov	ecx, DWORD PTR _cbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pwszDecodeBuf$[ebp]
	push	edx
	push	24					; 00000018H
	push	OFFSET ?pwszPnpMinorFunctionV@@3PAPA_WA	; pwszPnpMinorFunctionV
	push	0
	movzx	eax, BYTE PTR _MinorFunction$[ebp]
	push	eax
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H
	jmp	SHORT $LN6@MinorFunct

; 329  : 			break;

	jmp	SHORT $LN6@MinorFunct
$LN2@MinorFunct:

; 330  : 		case IRP_MJ_POWER:
; 331  : 			return DecodeEnum(
; 332  : 				MinorFunction,
; 333  : 				0,
; 334  : 				pwszPowerMinorFunctionV,
; 335  : 				sizeof pwszPowerMinorFunctionV / sizeof (PWSTR),
; 336  : 				pwszDecodeBuf,
; 337  : 				cbBufSize);

	mov	ecx, DWORD PTR _cbBufSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pwszDecodeBuf$[ebp]
	push	edx
	push	4
	push	OFFSET ?pwszPowerMinorFunctionV@@3PAPA_WA ; pwszPowerMinorFunctionV
	push	0
	movzx	eax, BYTE PTR _MinorFunction$[ebp]
	push	eax
	call	?DecodeEnum@@YAPA_WHHQAPA_WIPA_WK@Z	; DecodeEnum
	add	esp, 24					; 00000018H
	jmp	SHORT $LN6@MinorFunct

; 338  : 			break;

	jmp	SHORT $LN6@MinorFunct
$LN1@MinorFunct:

; 339  : 		default:
; 340  : 			StringCbPrintfW(
; 341  : 				pwszDecodeBuf,
; 342  : 				cbBufSize,
; 343  : 				L"%#x",
; 344  : 				MinorFunction);

	movzx	ecx, BYTE PTR _MinorFunction$[ebp]
	push	ecx
	push	OFFSET $SG67764
	mov	edx, DWORD PTR _cbBufSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pwszDecodeBuf$[ebp]
	push	eax
	call	?StringCbPrintfW@@YAJPA_WIPB_WZZ	; StringCbPrintfW
	add	esp, 16					; 00000010H

; 345  : 			return pwszDecodeBuf;

	mov	eax, DWORD PTR _pwszDecodeBuf$[ebp]
$LN6@MinorFunct:

; 346  : 	}
; 347  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_MinorFunctionDes ENDP
_TEXT	ENDS
END
